<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WampSharp</name>
    </assembly>
    <members>
        <member name="T:WampSharp.Core.Client.IWampServerProxyBuilder`3">
            <summary>
            Builds a WAMP server proxy.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TRawClient"></typeparam>
            <typeparam name="TServer"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Client.IWampServerProxyBuilder`3.Create(`1,WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Creates a WAMP server proxy based on the given connection
            which its callbacks will be handled by the given client.
            </summary>
            <param name="client">The given client which will handle server
            callbacks.</param>
            <param name="connection">The connection the proxy is based on.</param>
            <returns>A proxy to the server.</returns>
        </member>
        <member name="T:WampSharp.Core.Client.IWampServerProxyIncomingMessageHandlerBuilder`2">
            <summary>
            Builds an <see cref="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`2"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TRawClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Client.IWampServerProxyIncomingMessageHandlerBuilder`2.Build(`1,WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Creates an <see cref="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`2"/>
            that will use <paramref name="client"/> in order to handle incoming callbacks.
            </summary>
            <param name="client">The client that will be used in order to handle incoming callbacks.</param>
            <param name="connection">Not sure why this is here.</param>
            <returns>The built <see cref="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`1"/>.</returns>
        </member>
        <member name="T:WampSharp.Core.Client.IWampServerProxyOutgoingMessageHandlerBuilder`2">
            <summary>
            Creates a <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler`1"/> that will
            send messages to a WAMP server.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TRawClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Client.IWampServerProxyOutgoingMessageHandlerBuilder`2.Build(`1,WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Builds a <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler`1"/> that
            will send messages using the given <paramref name="connection"/>
            and get callbacks through the given <paramref name="client"/>.
            </summary>
            <param name="client">The client to receive callbacks from server through.</param>
            <param name="connection">The connection to send messages through.</param>
            <returns>The built <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler`1"/>.</returns>
        </member>
        <member name="T:WampSharp.Core.Client.WampServerProxyBuilder`3">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Client.IWampServerProxyBuilder`3"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TRawClient"></typeparam>
            <typeparam name="TServer"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Client.WampServerProxyBuilder`3.#ctor(WampSharp.Core.Proxy.IWampOutgoingRequestSerializer{`0},WampSharp.Core.Client.IWampServerProxyOutgoingMessageHandlerBuilder{`0,`1})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.Core.Client.WampServerProxyBuilder`3"/>
            </summary>
            <param name="outgoingSerializer">A <see cref="T:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer`1"/>
            used in order to serialize requests into <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s.</param>
            <param name="outgoingHandlerBuilder">A <see cref="T:WampSharp.Core.Client.IWampServerProxyOutgoingMessageHandlerBuilder`2"/>
            used in order to build an <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler`1"/> that will handle serialized
            <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s.</param>
        </member>
        <member name="T:WampSharp.Core.Client.WampServerProxyHandler`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler`1"/>
            that sends <see cref="T:WampSharp.Core.Message.WampMessage`1"/> to a given
            <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/> and receives from that connection
            messages which are handled by an <see cref="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`2"/>
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler`1">
            <summary>
            Handles outgoing <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Proxy.IWampOutgoingMessageHandler`1.Handle(WampSharp.Core.Message.WampMessage{`0})">
            <summary>
            Handles a given outgoing <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.
            </summary>
            <param name="message">The given message.</param>
        </member>
        <member name="M:WampSharp.Core.Client.WampServerProxyHandler`1.#ctor(WampSharp.Core.Listener.IWampConnection{`0},WampSharp.Core.Dispatch.IWampIncomingMessageHandler{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.Core.Client.WampServerProxyHandler`1"/>.
            </summary>
            <param name="connection">The connection used to send and receieve <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s.</param>
            <param name="incomingHandler">The handler used to handle incoming messages.</param>
        </member>
        <member name="T:WampSharp.Core.Client.WampServerProxyIncomingMessageHandlerBuilder`2">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Client.IWampServerProxyIncomingMessageHandlerBuilder`2"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TRawClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Client.WampServerProxyIncomingMessageHandlerBuilder`2.#ctor(WampSharp.Core.Serialization.IWampFormatter{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.Core.Client.WampServerProxyIncomingMessageHandlerBuilder`2"/>.
            </summary>
            <param name="formatter">A <see cref="T:WampSharp.Core.Serialization.IWampFormatter`1"/> used
            in order to deserialize requests.</param>
        </member>
        <member name="T:WampSharp.Core.Client.WampServerProxyOutgoingMessageHandlerBuilder`2">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Client.IWampServerProxyOutgoingMessageHandlerBuilder`2"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TRawClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Client.WampServerProxyOutgoingMessageHandlerBuilder`2.#ctor(WampSharp.Core.Client.IWampServerProxyIncomingMessageHandlerBuilder{`0,`1})">
            <summary>
            Creates an instance of <see cref="T:WampSharp.Core.Client.WampServerProxyOutgoingMessageHandlerBuilder`2"/>
            </summary>
            <param name="incomingHandlerBuilder">An <see cref="T:WampSharp.Core.Client.IWampServerProxyIncomingMessageHandlerBuilder`2"/>
            used in order to build incoming handler for callbacks.</param>
        </member>
        <member name="T:WampSharp.Core.Contracts.IWampMissingMethodContract`1">
            <summary>
            Handles messages that are not handled by other implemented interfaces
            of a given handler.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Contracts.IWampMissingMethodContract`1.Missing(WampSharp.Core.Message.WampMessage{`0})">
            <summary>
            Occurs when a message isn't handled by any other interface
            method of the handler.
            </summary>
            <param name="rawMessage">The message.</param>
        </member>
        <member name="T:WampSharp.Core.Contracts.IWampMissingMethodContract`2">
            <summary>
            Handles messages that are not handled by other implemented interfaces
            of a given handler.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Contracts.IWampMissingMethodContract`2.Missing(`1,WampSharp.Core.Message.WampMessage{`0})">
            <summary>
            Occurs when a message isn't handled by any other interface
            method of the handler.
            </summary>
            <param name="client">The client who sent the message.</param>
            <param name="rawMessage">The message.</param>
        </member>
        <member name="T:WampSharp.Core.Contracts.WampHandlerAttribute">
            <summary>
            Indicates that a method treats a specific <see cref="T:WampSharp.Core.Message.WampMessageType"/>.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Contracts.WampHandlerAttribute.#ctor(WampSharp.Core.Message.WampMessageType)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.Core.Contracts.WampHandlerAttribute"/>
            with the given <see cref="P:WampSharp.Core.Contracts.WampHandlerAttribute.MessageType"/>.
            </summary>
            <param name="messageType">The <see cref="T:WampSharp.Core.Message.WampMessageType"/> this
            method handles</param>
        </member>
        <member name="P:WampSharp.Core.Contracts.WampHandlerAttribute.MessageType">
            <summary>
            Gets the <see cref="T:WampSharp.Core.Message.WampMessageType"/> this method handles.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Contracts.WampProxyParameterAttribute">
            <summary>
            Indicates that a given parameter of a <see cref="T:WampSharp.Core.Contracts.WampHandlerAttribute"/> method 
            is a proxy to a WAMP contract.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Contracts.WampRawHandlerAttribute">
            <summary>
            Indicates a method handles raw <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Dispatch.Handler.IMethodBuilder`2">
            <summary>
            Builds a method by a given key.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TMethod"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Dispatch.Handler.IMethodBuilder`2.BuildMethod(`0)">
            <summary>
            Builds a method by a given key.
            </summary>
            <returns>A delegate to the given method.</returns>
        </member>
        <member name="T:WampSharp.Core.Dispatch.Handler.IWampRequestMapper`1">
            <summary>
            Maps WAMP requests to their corresponding method.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Dispatch.Handler.IWampRequestMapper`1.Map(WampSharp.Core.Message.WampMessage{`0})">
            <summary>
            Maps the given WAMP request to its corresponding method.
            </summary>
            <param name="request">The given WAMP request.</param>
            <returns>The given request's corresponding method.</returns>
        </member>
        <member name="T:WampSharp.Core.Dispatch.Handler.WampMethodBuilder`2">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Dispatch.Handler.IMethodBuilder`2"/>.
            Builds efficient delegates using compiled expressions.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Dispatch.Handler.WampMethodBuilder`2.#ctor(System.Object,WampSharp.Core.Serialization.IWampFormatter{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.Core.Dispatch.Handler.WampMethodBuilder`2"/>.
            </summary>
            <param name="instance">The instance to call its methods.</param>
            <param name="formatter">The <see cref="T:WampSharp.Core.Serialization.IWampFormatter`1"/> used to convert the arguments.</param>
        </member>
        <member name="T:WampSharp.Core.Dispatch.Handler.WampMethodInfo">
            <summary>
            Represents a structure that contains information about a
            <see cref="T:WampSharp.Core.Contracts.WampHandlerAttribute"/> method.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Dispatch.Handler.WampMethodInfo.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a new <see cref="T:WampSharp.Core.Dispatch.Handler.WampMethodInfo"/> given a
            <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="method">The given method to obtain information
            from.</param>
        </member>
        <member name="P:WampSharp.Core.Dispatch.Handler.WampMethodInfo.Method">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> this method represents.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Dispatch.Handler.WampMethodInfo.ArgumentsCount">
            <summary>
            Gets the number of arguments this method gets, not including
            <see cref="T:WampSharp.Core.Contracts.WampProxyParameterAttribute"/> parameter.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Dispatch.Handler.WampMethodInfo.HasWampClientArgument">
            <summary>
            Returns a value indicating whether this method gets a
            <see cref="T:WampSharp.Core.Contracts.WampProxyParameterAttribute"/> parameter.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Dispatch.Handler.WampMethodInfo.HasParamsArgument">
            <summary>
            Returns a value indicating whether this method has a params
            argument.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Dispatch.Handler.WampMethodInfo.IsRawMethod">
            <summary>
            Returns a value indicating whether this method receives the given
            <see cref="T:WampSharp.Core.Message.WampMessage`1"/> as is.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Dispatch.Handler.WampMethodInfo.Parameters">
            <summary>
            Gets this method's parameters.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Dispatch.Handler.WampMethodInfo.ParametersToConvert">
            <summary>
            Gets this method's parameters that require deserialization.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Dispatch.Handler.WampMethodInfo.TotalArgumentsCount">
            <summary>
            Gets the number of arguments of this method.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Dispatch.Handler.WampMethodInfo.MessageType">
            <summary>
            Gets the message type this method handles.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Dispatch.Handler.WampRequestMapper`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Dispatch.Handler.IWampRequestMapper`1"/> that
            maps requests to methods using <see cref="T:WampSharp.Core.Contracts.WampHandlerAttribute"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Dispatch.Handler.WampRequestMapper`1.#ctor(System.Type,WampSharp.Core.Serialization.IWampFormatter{`0})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.Core.Dispatch.Handler.WampRequestMapper`1"/>
            </summary>
            <param name="type">The type to map WAMP requests its methods.</param>
            <param name="formatter">A <see cref="T:WampSharp.Core.Serialization.IWampFormatter`1"/> used
            to check if a parameter can be binded to given type.</param>
        </member>
        <member name="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`2">
            <summary>
            Handles incoming <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s receieved from clients.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TClient"></typeparam>
            <remarks>
            This should probably dispatch the given message to its corresponding
            method.
            </remarks>
        </member>
        <member name="M:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`2.HandleMessage(`1,WampSharp.Core.Message.WampMessage{`0})">
            <summary>
            Handles a given incoming message from a given client.
            </summary>
            <param name="client">The client who sent the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`1">
            <summary>
            Handles <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`1.HandleMessage(WampSharp.Core.Message.WampMessage{`0})">
            <summary>
            Handles a given incoming message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:WampSharp.Core.Dispatch.WampIncomingMessageHandler`2">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`2"/>,
            <see cref="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`1"/> that dispatches
            <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s to their corresponding methods.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Dispatch.WampIncomingMessageHandler`2.#ctor(WampSharp.Core.Dispatch.Handler.IWampRequestMapper{`0},WampSharp.Core.Dispatch.Handler.IMethodBuilder{WampSharp.Core.Dispatch.Handler.WampMethodInfo,System.Action{`1,WampSharp.Core.Message.WampMessage{`0}}})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.Core.Dispatch.WampIncomingMessageHandler`2"/>
            given <paramref name="wampRequestMapper"/> and
            <paramref name="methodBuilder"/>
            </summary>
            <param name="wampRequestMapper">The <see cref="T:WampSharp.Core.Dispatch.Handler.IWampRequestMapper`1"/>
            used in order to map <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s to their suitable methods.</param>
            <param name="methodBuilder">The <see cref="T:WampSharp.Core.Dispatch.Handler.IMethodBuilder`2"/> used 
            in order to build the corresponding methods.</param>
        </member>
        <member name="T:WampSharp.Core.Listener.IWampClientBuilder`2">
            <summary>
            Builds a proxy to a WAMP client given a <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Listener.IWampClientBuilder`2.Create(WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Creates a proxy to a WAMP client by the given connection.
            </summary>
            <param name="connection">The connection to the client.</param>
            <returns>A proxy to the WAMP client.</returns>
        </member>
        <member name="T:WampSharp.Core.Listener.IWampClientBuilderFactory`2">
            <summary>
            Builds a <see cref="T:WampSharp.Core.Listener.IWampClientBuilder`2"/> corresponding 
            for a given <see cref="T:WampSharp.Core.Listener.IWampClientContainer`2"/>
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TClient"></typeparam>
            <remarks>
            This interface solves a problem that two objects are circular dependent
            in readonly fields.
            </remarks>
        </member>
        <member name="M:WampSharp.Core.Listener.IWampClientBuilderFactory`2.GetClientBuilder(WampSharp.Core.Listener.IWampClientContainer{`0,`1})">
            <summary>
            Creates a <see cref="T:WampSharp.Core.Listener.IWampClientBuilder`2"/>
            given a <see cref="T:WampSharp.Core.Listener.IWampClientContainer`2"/>.
            </summary>
            <param name="container">The given <see cref="T:WampSharp.Core.Listener.IWampClientContainer`2"/>.</param>
            <returns>The created <see cref="T:WampSharp.Core.Listener.IWampClientBuilder`2"/>.</returns>
        </member>
        <member name="T:WampSharp.Core.Listener.IWampOutgoingMessageHandlerBuilder`1">
            <summary>
            Builds an <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler`1"/>
            for a given connection.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Listener.IWampOutgoingMessageHandlerBuilder`1.Build(WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Builds an <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler`1"/>
            for the given <paramref name="connection"/>.
            </summary>
            <param name="connection">The given connection.</param>
            <returns>The built <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler`1"/></returns>
        </member>
        <member name="T:WampSharp.Core.Listener.WampOutgoingMessageHandler`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler`1"/>
            that dispatches messages to an <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Listener.WampOutgoingMessageHandler`1.#ctor(WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.Core.Listener.WampOutgoingMessageHandler`1"/>
            using a given <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/>
            </summary>
            <param name="connection">The given WAMP connection.</param>
        </member>
        <member name="T:WampSharp.Core.Listener.WampOutgoingMessageHandlerBuilder`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Listener.IWampOutgoingMessageHandlerBuilder`1"/>
            using <see cref="T:WampSharp.Core.Listener.WampOutgoingMessageHandler`1"/>
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.Core.Listener.IWampClientContainer`2">
            <summary>
            A container of client proxies.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Listener.IWampClientContainer`2.GetClient(WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Gets a client proxy for the given <paramref name="connection"/>.
            </summary>
            <param name="connection">The given connection.</param>
            <returns>A client proxy.</returns>
        </member>
        <member name="M:WampSharp.Core.Listener.IWampClientContainer`2.GetAllClients">
            <summary>
            Returns all clients currently registered in the container.
            </summary>
            <returns>An enumerable of clients currently present in the container.</returns>
        </member>
        <member name="M:WampSharp.Core.Listener.IWampClientContainer`2.RemoveClient(WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Removes a client from the container given its connection.
            </summary>
            <param name="connection">The given client's connection.</param>
        </member>
        <member name="M:WampSharp.Core.Listener.IWampClientContainer`2.TryGetClient(WampSharp.Core.Listener.IWampConnection{`0},`1@)">
            <summary>
            Gets a client proxy for the given <paramref name="connection"/> if it
            is present.
            </summary>
            <param name="connection">The given connection.</param>
            <returns>A client proxy.</returns>
        </member>
        <member name="T:WampSharp.Core.Listener.WampClientContainer`2">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Listener.IWampClientContainer`2"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Listener.WampClientContainer`2.#ctor(WampSharp.Core.Listener.IWampClientBuilderFactory{`0,`1})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.Core.Listener.WampClientContainer`2"/>
            using a client builder that is activated using the given 
            <paramref name="clientBuilderFactory"/> and this container.
            </summary>
            <param name="clientBuilderFactory">The given <see cref="T:WampSharp.Core.Listener.IWampClientBuilderFactory`2"/>.</param>
        </member>
        <member name="T:WampSharp.Core.Listener.WampClientContainerDisposable`2">
            <summary>
            An <see cref="T:System.IDisposable"/> that is used as a mixin for implementing
            <see cref="T:System.IDisposable"/> for generated proxies.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Listener.WampClientContainerDisposable`2.#ctor(WampSharp.Core.Listener.IWampClientContainer{`0,`1},WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.Core.Listener.WampClientContainerDisposable`2"/>.
            </summary>
            <param name="container">The container that contains the client proxy.</param>
            <param name="connection">The connection of the client.</param>
        </member>
        <member name="T:WampSharp.Core.Listener.IControlledWampConnection`1">
            <summary>
            Represents a <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/> that its state
            can be controlled.
            </summary>
            <remarks>
            This interface was created in order to apply client side connection
            capabilites.
            </remarks>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.Core.Listener.IWampConnection`1">
            <summary>
            Represents a WAMP bi-directional connection.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Listener.IWampConnection`1.Send(WampSharp.Core.Message.WampMessage{`0})">
            <summary>
            Sends a given message through the wire.
            </summary>
            <param name="message">The given message.</param>
        </member>
        <member name="E:WampSharp.Core.Listener.IWampConnection`1.ConnectionOpen">
            <summary>
            Occurs when this connection opens.
            </summary>
        </member>
        <member name="E:WampSharp.Core.Listener.IWampConnection`1.MessageArrived">
            <summary>
            Occurs when a message arrives.
            </summary>
        </member>
        <member name="E:WampSharp.Core.Listener.IWampConnection`1.ConnectionClosed">
            <summary>
            Occurs when this connection closes.
            </summary>
        </member>
        <member name="E:WampSharp.Core.Listener.IWampConnection`1.ConnectionError">
            <summary>
            Occurs when this connection occurs an error.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Listener.IControlledWampConnection`1.Connect">
            <summary>
            Tries to establish a connection to the remote server.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Listener.IWampConnectionListener`1">
            <summary>
            Represents a <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/> listener.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.Core.Listener.IWampConnectionMonitor">
            <summary>
            Allows getting notified when a WAMP client gets disconnected.
            </summary>
        </member>
        <member name="E:WampSharp.Core.Listener.IWampConnectionMonitor.ConnectionClosed">
            <summary>
            Occurs when a connection is closed.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Listener.WampConnectionErrorEventArgs">
            <summary>
            Represents error <see cref="T:System.EventArgs"/>.
            </summary>
            <remarks>
            Used for <see cref="E:WampSharp.Core.Listener.IWampConnection`1.ConnectionError"/>;
            </remarks>
        </member>
        <member name="M:WampSharp.Core.Listener.WampConnectionErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes an new instance of <see cref="T:WampSharp.Core.Listener.WampConnectionErrorEventArgs"/>.
            </summary>
            <param name="exception">The exception that describes this error.</param>
        </member>
        <member name="P:WampSharp.Core.Listener.WampConnectionErrorEventArgs.Exception">
            <summary>
            Gets the exception that represents the error.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Listener.WampConnectionMonitor`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Listener.IWampConnectionMonitor"/> used
            as a mixin in <see cref="T:WampSharp.Core.Listener.IWampClientBuilder`2"/>
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.Core.Listener.WampMessageArrivedEventArgs`1">
            <summary>
            Represents <see cref="T:System.EventArgs"/> for an incoming message.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <remarks>
            Used for <see cref="E:WampSharp.Core.Listener.IWampConnection`1.MessageArrived"/>.
            </remarks>
        </member>
        <member name="M:WampSharp.Core.Listener.WampMessageArrivedEventArgs`1.#ctor(WampSharp.Core.Message.WampMessage{`0})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.Core.Listener.WampMessageArrivedEventArgs`1"/>.
            </summary>
            <param name="message">The message </param>
        </member>
        <member name="P:WampSharp.Core.Listener.WampMessageArrivedEventArgs`1.Message">
            <summary>
            Gets the arrived message.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Listener.WampListener`2">
            <summary>
            Listens to <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/>s, receives 
            <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s and dispatches them to a given <see cref="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`2"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Listener.WampListener`2.#ctor(WampSharp.Core.Listener.IWampConnectionListener{`0},WampSharp.Core.Dispatch.IWampIncomingMessageHandler{`0,`1},WampSharp.Core.Listener.IWampClientContainer{`0,`1})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.Core.Listener.WampListener`2"/>
            </summary>
            <param name="listener">The <see cref="T:WampSharp.Core.Listener.IWampConnectionListener`1"/> used in order to 
            accept incoming connections.</param>
            <param name="handler">The <see cref="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`2"/> used
            in order to dispatch incoming messages.</param>
            <param name="clientContainer">The <see cref="T:WampSharp.Core.Listener.IWampClientContainer`2"/> use
            in order to store the connected clients.</param>
        </member>
        <member name="M:WampSharp.Core.Listener.WampListener`2.Start">
            <summary>
            Starts listening for <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/>s.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Listener.WampListener`2.Stop">
            <summary>
            Stops the listener.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Listener.WampListener`2.ClientContainer">
            <summary>
            The <see cref="T:WampSharp.Core.Listener.IWampClientContainer`2"/>
            holding all current connected clients.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Message.WampMessageType">
            <summary>
            Represents message types defined by the WAMP protocl.
            </summary>
            <remarks>
            This enum comntains the message types of both WAMPv1 and WAMPv2.
            The reason for this is that it would be more complicated to build
            the framework if this is seperated into two enums.
            </remarks>
        </member>
        <member name="T:WampSharp.Core.Message.WampMessage`1">
            <summary>
            Represents a WAMP protocol message.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Message.WampMessage`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Message.WampMessage`1.#ctor(WampSharp.Core.Message.WampMessage{`0})">
            <summary>
            Copy constructor for inherited classes.
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:WampSharp.Core.Message.WampMessage`1.MessageType">
            <summary>
            Gets or sets the message type.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Message.WampMessage`1.Arguments">
            <summary>
            Gets or sets the arguments of this message.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer`1">
            <summary>
            Serializes method calls into <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer`1.SerializeRequest(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Serializes a method call into a <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.
            </summary>
            <param name="method">The method that was called.</param>
            <param name="arguments">The arguments of the call.</param>
            <returns>The serialized <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.</returns>
        </member>
        <member name="T:WampSharp.Core.Proxy.WampOutgoingInterceptor`1">
            <summary>
            An interceptor that serializes requests and sends them to a
            <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Proxy.WampOutgoingInterceptor`1.#ctor(WampSharp.Core.Proxy.IWampOutgoingRequestSerializer{`0},WampSharp.Core.Proxy.IWampOutgoingMessageHandler{`0})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.Core.Proxy.WampOutgoingInterceptor`1"/>.
            </summary>
            <param name="outgoingSerializer">The <see cref="T:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer`1"/> to
            serialize method calls with.</param>
            <param name="outgoingHandler">The <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler`1"/>
            that will deal with the serialized method calls.</param>
        </member>
        <member name="M:WampSharp.Core.Proxy.WampOutgoingInterceptor`1.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            <see cref="M:Castle.DynamicProxy.IInterceptor.Intercept(Castle.DynamicProxy.IInvocation)"/>
            </summary>
        </member>
        <member name="T:WampSharp.Core.Proxy.WampOutgoingRequestSerializer`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer`1"/>.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Proxy.WampOutgoingRequestSerializer`1.#ctor(WampSharp.Core.Serialization.IWampFormatter{`0})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.Core.Proxy.WampOutgoingRequestSerializer`1"/>.
            </summary>
            <param name="formatter">The <see cref="T:WampSharp.Core.Serialization.IWampFormatter`1"/> to
            serialize arguments with.</param>
        </member>
        <member name="T:WampSharp.Core.Proxy.WampRawOutgoingInterceptor`1">
            <summary>
            An interceptor that sends raw <see cref="T:WampSharp.Core.Message.WampMessage`1"/> to the wire.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Proxy.WampRawOutgoingInterceptor`1.#ctor(WampSharp.Core.Proxy.IWampOutgoingMessageHandler{`0})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.Core.Proxy.WampRawOutgoingInterceptor`1"/>.
            </summary>
            <param name="outgoingHandler">The <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler`1"/>
            used to write messages to the wire.</param>
        </member>
        <member name="M:WampSharp.Core.Proxy.WampRawOutgoingInterceptor`1.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            <see cref="M:Castle.DynamicProxy.IInterceptor.Intercept(Castle.DynamicProxy.IInvocation)"/>
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="T:WampSharp.Core.Serialization.IWampFormatter`1">
            <summary>
            Represents a messages formatter
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Serialization.IWampFormatter`1.CanConvert(`0,System.Type)">
            <summary>
            Returns a value indicating whether the given argument
            can be deserialized to the given type.
            </summary>
            <param name="argument">The given argument.</param>
            <param name="type">The given type.</param>
            <returns>A value indicating whether the given argument
            can be casted to the given type.</returns>
        </member>
        <member name="M:WampSharp.Core.Serialization.IWampFormatter`1.Deserialize``1(`0)">
            <summary>
            Deserializes the given messages to the given type.
            </summary>
            <typeparam name="TTarget"></typeparam>
            <param name="message">The given message.</param>
            <returns>The deserialized message.</returns>
        </member>
        <member name="M:WampSharp.Core.Serialization.IWampFormatter`1.Deserialize(System.Type,`0)">
            <summary>
            Deserializes the given messages to the given type.
            </summary>
            <param name="type">The given type.</param>
            <param name="message">The given message.</param>
            <returns>The deserialized message.</returns>
        </member>
        <member name="M:WampSharp.Core.Serialization.IWampFormatter`1.Serialize(System.Object)">
            <summary>
            Serializes the given object to the message type.
            </summary>
            <param name="value">The given object.</param>
            <returns>The serialized message.</returns>
        </member>
        <member name="T:WampSharp.Core.Serialization.IWampMessageSerializerFactory">
            <summary>
            Represents a type capable of creating WAMP message serializers.
            </summary>
            <example>
            A WAMP message serializer is a class that looks implements an interface that 
            looks like this:
            
            public interface IMySerializer{TMessage}
            {
                [WampMessageHandler(WampMessageType.v1Event)]
                WampMessage{TMessage} Event(string topicUri, object @event);
            }
            
            It is used in order to avoid multiple messages serialization of
            message that are sent to multiple clients.
            </example>
        </member>
        <member name="M:WampSharp.Core.Serialization.IWampMessageSerializerFactory.GetSerializer``1">
            <summary>
            Creates a WAMP message serializer of a given type.
            </summary>
            <typeparam name="TProxy">The WAMP message serializer given type.</typeparam>
            <returns>The created WAMP message serializer.</returns>
        </member>
        <member name="T:WampSharp.Core.Serialization.WampMessageSerializerFactory`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Serialization.IWampMessageSerializerFactory"/> using
            <see cref="T:Castle.DynamicProxy.ProxyGenerator"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Serialization.WampMessageSerializerFactory`1.#ctor(WampSharp.Core.Proxy.IWampOutgoingRequestSerializer{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.Core.Serialization.WampMessageSerializerFactory`1"/>
            given a <see cref="T:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer`1"/>, used to serialize
            message.
            </summary>
            <param name="serializer">The given <see cref="T:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer`1"/>.</param>
        </member>
        <member name="T:WampSharp.Core.Serialization.WampSerializationInterceptor`1">
            <summary>
            Represents a <see cref="T:Castle.DynamicProxy.IInterceptor"/> used for <see cref="T:WampSharp.Core.Serialization.WampMessageSerializerFactory`1"/>
            mechanism.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Serialization.WampSerializationInterceptor`1.#ctor(WampSharp.Core.Proxy.IWampOutgoingRequestSerializer{`0})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.Core.Serialization.WampSerializationInterceptor`1"/>
            given the <see cref="T:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer`1"/> used to serialize
            method calls to messages.
            </summary>
            <param name="serializer">The given <see cref="T:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer`1"/>.</param>
        </member>
        <member name="M:WampSharp.Core.Serialization.WampSerializationInterceptor`1.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            <see cref="M:Castle.DynamicProxy.IInterceptor.Intercept(Castle.DynamicProxy.IInvocation)"/>
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="T:WampSharp.Core.Utilities.GenericTypeExtensions">
            <summary>
            Contains extension methods of <see cref="T:System.Type"/> for 
            generic types.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Utilities.GenericTypeExtensions.IsGenericAssignableFrom(System.Type,System.Type)">
            <summary>
            Returns a value indicating whether the given type
            can be converted to a generic version of the given open generic type.
            </summary>
            <param name="openGenericType">The given open generic type.</param>
            <param name="type">The given type.</param>
            <returns>A value indicating whether the given type
            can be converted to a generic version of the given open generic type.</returns>
        </member>
        <member name="M:WampSharp.Core.Utilities.GenericTypeExtensions.GetClosedGenericTypeImplementation(System.Type,System.Type)">
            <summary>
            Returns the closed generic type of the given generic open type,
            that the given type is assignable to.
            </summary>
            <param name="type">The given type.</param>
            <param name="openGenericType">The open generic type.</param>
            <returns>The closed generic type of the given generic open type,
            that the given type is assignable to.</returns>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampServer`1">
            <summary>
            Contains all methods of WAMP server.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampAuxiliaryServer">
            <summary>
            Represents the auxiliary methods of a WAMP server.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampAuxiliaryServer.Prefix(WampSharp.V1.Core.Contracts.IWampClient,System.String,System.String)">
            <summary>
            A prefix message sent by a client in order to map curies.
            </summary>
            <param name="client">The client who sent the message.</param>
            <param name="prefix">The prefix.</param>
            <param name="uri">The full uri.</param>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampRpcServer`1">
            <summary>
            Contains the RPC methods of a WAMP server.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampRpcServer`1.Call(WampSharp.V1.Core.Contracts.IWampClient,System.String,System.String,`0[])">
            <summary>
            Occurs when a client calls a rpc method.
            </summary>
            <param name="client">The client who sent the message.</param>
            <param name="callId">An id of this call.</param>
            <param name="procUri">An uri representing the method to call.</param>
            <param name="arguments">The arguments of the method to call.</param>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampPubSubServer`1">
            <summary>
            Contains the pub/sub methods of a WAMP server.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampPubSubServer`1.Subscribe(WampSharp.V1.Core.Contracts.IWampClient,System.String)">
            <summary>
            Occurs when a client subscribes to a topic uri.
            </summary>
            <param name="client">The client who sent the message.</param>
            <param name="topicUri">The topic uri the client subscribed to.</param>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampPubSubServer`1.Unsubscribe(WampSharp.V1.Core.Contracts.IWampClient,System.String)">
            <summary>
            Occurs when a client unsubscribes from a topic uri.
            </summary>
            <param name="client">The client who sent the message.</param>
            <param name="topicUri">The topic uri the client unsubscribed from.</param>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampPubSubServer`1.Publish(WampSharp.V1.Core.Contracts.IWampClient,System.String,`0)">
            <summary>
            Occurs when a client publishes an event to a topic uri.
            </summary>
            <param name="client">The client who sent the message.</param>
            <param name="topicUri">The topic uri the client published to.</param>
            <param name="event">The event the client published.</param>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampPubSubServer`1.Publish(WampSharp.V1.Core.Contracts.IWampClient,System.String,`0,System.Boolean)">
            <summary>
            Occurs when a client publishes an event to a topic uri.
            </summary>
            <param name="client">The client who sent the message.</param>
            <param name="topicUri">The topic uri the client published to.</param>
            <param name="event">The event the client published.</param>
            <param name="excludeMe">A value indicating whether to exclude the client from
            the recipients of the message.</param>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampPubSubServer`1.Publish(WampSharp.V1.Core.Contracts.IWampClient,System.String,`0,System.String[])">
            <summary>
            Occurs when a client publishes an event to a topic uri.
            </summary>
            <param name="client">The client who sent the message.</param>
            <param name="topicUri">The topic uri the client published to.</param>
            <param name="event">The event the client published.</param>
            <param name="exclude">A collection of session ids of clients being excluded from the
            recipients of the event.</param>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampPubSubServer`1.Publish(WampSharp.V1.Core.Contracts.IWampClient,System.String,`0,System.String[],System.String[])">
            <summary>
            Occurs when a client publishes an event to a topic uri.
            </summary>
            <param name="client">The client who sent the message.</param>
            <param name="topicUri">The topic uri the client published to.</param>
            <param name="event">The event the client published.</param>
            <param name="exclude">A collection of session ids of clients being excluded from the
            recipients of the event.</param>
            <param name="eligible">A collection of session ids of the only clients that should not be exluded from the
            recipients of the event.</param>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampAuxiliaryClient">
            <summary>
            Represents the auxiliary methods of a WAMP client.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampAuxiliaryClient.Welcome(System.String,System.Int32,System.String)">
            <summary>
            Server-to-client WELCOME message.
            </summary>
            <param name="sessionId">The client's session id.</param>
            <param name="protocolVersion">The WAMP protocol version the server speaks.</param>
            <param name="serverIdent">A string the server may use to disclose it's version, software, platform or identity.</param>
        </member>
        <member name="P:WampSharp.V1.Core.Contracts.IWampAuxiliaryClient.SessionId">
            <summary>
            Gets the given WAMP client's session id.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampClient">
            <summary>
            An object version of <see cref="T:WampSharp.V1.Core.Contracts.IWampClient`1"/>
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampClient`1">
            <summary>
            Contains all methods of WAMP client.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampRpcClient`1">
            <summary>
            Contains the RPC methods of a WAMP client.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampRpcClient`1.CallResult(System.String,`0)">
            <summary>
            Occurs when a call result arrives.
            </summary>
            <param name="callId">The call id.</param>
            <param name="result">The call result.</param>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampRpcClient`1.CallError(System.String,System.String,System.String)">
            <summary>
            Occurs when a call error arrives.
            </summary>
            <param name="callId">The call id.</param>
            <param name="errorUri">An uri to a page describing the error.</param>
            <param name="errorDesc">The error description.</param>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampRpcClient`1.CallError(System.String,System.String,System.String,`0)">
            <summary>
            Occurs when a call error arrives.
            </summary>
            <param name="callId">The call id.</param>
            <param name="errorUri">An uri to a page describing the error.</param>
            <param name="errorDesc">The error description.</param>
            <param name="errorDetails">An object representing error details.</param>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampPubSubClient`1">
            <summary>
            Contains the pub/sub methods of a WAMP client.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampPubSubClient`1.Event(System.String,`0)">
            <summary>
            Occurs when a new event is published to topic 
            the client is subscribed to.
            </summary>
            <param name="topicUri">The topic uri the current event is published to.</param>
            <param name="event">The current event.</param>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampCraClient">
            <summary>
            Interface to data regarding a client that is authenticated (or being authenticated).
            </summary>
        </member>
        <member name="P:WampSharp.V1.Core.Contracts.IWampCraClient.CraAuthenticator">
            <summary>
            Interface to data regarding a client that is authenticated (or being authenticated).
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampRpcClient">
            <summary>
            An object version of <see cref="T:WampSharp.V1.Core.Contracts.IWampRpcClient`1"/>
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampPubSubClient">
            <summary>
            An object version of <see cref="T:WampSharp.V1.Core.Contracts.IWampPubSubClient`1"/>
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampServer">
            <summary>
            An object version of <see cref="T:WampSharp.V1.Core.Contracts.IWampServer`1"/>
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Curie.IWampCurieMapper">
            <summary>
            Maps prefixes to uris.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Core.Curie.IWampCurieMapper.Resolve(System.String)">
            <summary>
            Resolves a compact uri by the current prefixes mapping.
            </summary>
            <param name="curie">The given compact uri.</param>
            <returns>The resolved uri.</returns>
        </member>
        <member name="M:WampSharp.V1.Core.Curie.IWampCurieMapper.Map(System.String,System.String)">
            <summary>
            Maps a prefix to a uri.
            </summary>
            <param name="prefix">The given prefix.</param>
            <param name="uri">The given uri.</param>
        </member>
        <member name="T:WampSharp.V1.Core.Curie.WampCurieMapper">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.Core.Curie.IWampCurieMapper"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Listener.ClientBuilder.WampClientBuilder`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Listener.IWampClientBuilder`2"/>
            that is a bit specific to WAMPv1 (because of curies).
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Core.Listener.ClientBuilder.WampClientBuilder`1.#ctor(WampSharp.V1.Core.Listener.IWampSessionIdGenerator,WampSharp.Core.Proxy.IWampOutgoingRequestSerializer{`0},WampSharp.Core.Listener.IWampOutgoingMessageHandlerBuilder{`0},WampSharp.Core.Listener.IWampClientContainer{`0,WampSharp.V1.Core.Contracts.IWampClient})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Core.Listener.ClientBuilder.WampClientBuilder`1"/>.
            </summary>
            <param name="sessionIdGenerator">A given <see cref="T:WampSharp.V1.Core.Listener.IWampSessionIdGenerator"/> used in order
            to generate session ids for clients.</param>
            <param name="outgoingSerializer">A <see cref="T:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer`1"/>
            used to serialize message calls into <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s</param>
            <param name="outgoingHandlerBuilder">An <see cref="T:WampSharp.Core.Listener.IWampOutgoingMessageHandlerBuilder`1"/> used to build
            a <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler`1"/> per connection.</param>
            <param name="container">A <see cref="T:WampSharp.Core.Listener.IWampClientContainer`2"/> that contains all clients.</param>
        </member>
        <member name="T:WampSharp.V1.Core.Listener.ClientBuilder.WampClientBuilderFactory`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Listener.IWampClientBuilderFactory`2"/>
            using <see cref="T:WampSharp.V1.Core.Listener.ClientBuilder.WampClientBuilder`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Core.Listener.ClientBuilder.WampClientBuilderFactory`1.#ctor(WampSharp.V1.Core.Listener.IWampSessionIdGenerator,WampSharp.Core.Proxy.IWampOutgoingRequestSerializer{`0},WampSharp.Core.Listener.IWampOutgoingMessageHandlerBuilder{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Core.Listener.ClientBuilder.WampClientBuilderFactory`1"/>.
            </summary>
            <param name="sessionIdGenerator">The <see cref="T:WampSharp.V1.Core.Listener.IWampSessionIdGenerator"/> used to generate
            session ids.</param>
            <param name="outgoingSerializer">The <see cref="T:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer`1"/>
            used to serialize methods call to <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s.</param>
            <param name="outgoingHandlerBuilder">The <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler`1"/>
            used to create the <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler`1"/> used to
            handle outgoing <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s.</param>
        </member>
        <member name="T:WampSharp.V1.Core.Listener.IWampSessionIdGenerator">
            <summary>
            Generates session ids for clients.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Core.Listener.IWampSessionIdGenerator.Generate">
            <summary>
            Generates a session id for a client.
            </summary>
            <returns>The generated session id.</returns>
        </member>
        <member name="T:WampSharp.V1.Core.Listener.WampListener`1">
            <summary>
            A <see cref="T:WampSharp.Core.Listener.WampListener`2"/> that is
            WAMPv1 specific.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Core.Listener.WampListener`1.#ctor(WampSharp.Core.Listener.IWampConnectionListener{`0},WampSharp.Core.Dispatch.IWampIncomingMessageHandler{`0,WampSharp.V1.Core.Contracts.IWampClient},WampSharp.Core.Listener.IWampClientContainer{`0,WampSharp.V1.Core.Contracts.IWampClient})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Core.Listener.WampListener`1"/>
            </summary>
            <param name="listener">The <see cref="T:WampSharp.Core.Listener.IWampConnectionListener`1"/> used in order to 
            accept incoming connections.</param>
            <param name="handler">The <see cref="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`2"/> used
            in order to dispatch incoming messages.</param>
            <param name="clientContainer">The <see cref="T:WampSharp.Core.Listener.IWampClientContainer`2"/> use
            in order to store the connected clients.</param>
        </member>
        <member name="E:WampSharp.V1.Core.Listener.WampListener`1.SessionCreated">
            <summary>
            Occurs when a WAMP session is created.
            </summary>
        </member>
        <member name="E:WampSharp.V1.Core.Listener.WampListener`1.SessionClosed">
            <summary>
            Occurs when a WAMP session is closed.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Listener.WampSessionEventArgs">
            <summary>
            Represents <see cref="T:System.EventArgs"/> for WAMP session events.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Core.Listener.WampSessionEventArgs.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Core.Listener.WampSessionEventArgs"/>.
            </summary>
            <param name="sessionId">The session id.</param>
        </member>
        <member name="P:WampSharp.V1.Core.Listener.WampSessionEventArgs.SessionId">
            <summary>
            The session id.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Listener.WampSessionIdGenerator">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.Core.Listener.IWampSessionIdGenerator"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Core.Listener.WampSessionIdGenerator.#ctor">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Core.Listener.WampSessionIdGenerator"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Proxy.WampInterceptorSelector`1">
            <summary>
            An <see cref="T:Castle.DynamicProxy.IInterceptorSelector"/> that chooses between
            <see cref="T:WampSharp.Core.Proxy.WampOutgoingInterceptor`1"/> and 
            <see cref="T:WampSharp.V1.Core.Proxy.SessionIdPropertyInterceptor"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Core.Proxy.WampInterceptorSelector`1.#ctor(WampSharp.Core.Proxy.WampOutgoingInterceptor{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Core.Proxy.WampInterceptorSelector`1"/>.
            </summary>
            <param name="interceptor">The given <see cref="T:WampSharp.Core.Proxy.WampOutgoingInterceptor`1"/> used
            for WAMP method calls</param>
        </member>
        <member name="T:WampSharp.V1.Cra.IWampCraAuthenticator">
            <summary>
            Interface to data regarding a client that is authenticated (or being authenticated).
            </summary>
        </member>
        <member name="P:WampSharp.V1.Cra.IWampCraAuthenticator.ClientSessionId">
            <summary>
            Gets the sessionId of the connected client.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Cra.IWampCraAuthenticator.AuthKey">
            <summary>
            The authKey provided by the client during the WAMP-CRA authentication request.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Cra.IWampCraAuthenticator.IsAuthenticated">
            <summary>
            Gets a value indicating whether the user identified by AuthKey is successfully authenticated.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Cra.IWampCraProcedures">
            <summary>
            Contract for v1 WAMP-CRA RPC Calls.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Cra.IWampCraProcedures.AuthReq(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            RPC endpoint for clients to initiate the authentication handshake.
            </summary>
            <param name="authKey">Authentication key, such as user name or application name.</param>
            <param name="extra">Extra data for salting the secret. Possible key values 'salt' (required,
            otherwise the secret is unsalted), 'iterations' (1000 default), and/or 'keylen' (32 default).</param>
            <returns>
            Authentication challenge. The client will need to create an authentication signature from
            this. The type WampCraChallenge can be deserialized from this.
            </returns>        
        </member>
        <member name="M:WampSharp.V1.Cra.IWampCraProcedures.Auth(System.String)">
            <summary>
            RPC endpoint for clients to actually authenticate after requesting authentication and
            computing a signature from the authentication challenge.
            </summary>
            <param name="signature">The signature.</param>
            <returns>
            A set of permissions the client is granted when authentication was successful.
            </returns>        
        </member>
        <member name="T:WampSharp.V1.Cra.MockWampCraProcedures">
            <summary>
            Mocked IWampCraProcedures for use in registering with the RpcMetadataCatalog.
            </summary>
            <seealso cref="T:WampSharp.V1.Cra.IWampCraProcedures"/>
        </member>
        <member name="T:WampSharp.V1.Cra.WampCraAuthenticator`1">
            <summary>
            WAMP-CRA is a cryptographically strong challenge response authentication protocol based on
            HMAC-SHA256. The protocol performs in-band authentication of WAMP clients to WAMP servers.
            WAMP-CRA does not introduce any new WAMP protocol level message types, but implements the
            authentication handshake via standard WAMP RPCs with well-known procedure URIs and signatures.
            </summary>
            <seealso cref="T:WampSharp.V1.Cra.IWampCraProcedures"/>
            <seealso cref="T:WampSharp.V1.Cra.IWampCraAuthenticator"/>
        </member>
        <member name="M:WampSharp.V1.Cra.WampCraAuthenticator`1.#ctor(System.String,WampSharp.Core.Serialization.IWampFormatter{`0},WampSharp.V1.Rpc.Server.IWampRpcMetadataCatalog,WampSharp.V1.PubSub.Server.IWampTopicContainer)">
            <summary>
            Specialized constructor for use only by derived classes.
            </summary>
            <param name="clientSessionId">Identifier for the client session.</param>
            <param name="formatter">The formatter.</param>
            <param name="metadataCatalog">The metadata catalog.</param>
            <param name="topicContainer">The topic container.</param>
        </member>
        <member name="M:WampSharp.V1.Cra.WampCraAuthenticator`1.GetAllRpcMethods">
            <summary>
            Gets all RPC methods in this collection.
            </summary>
            <returns>
            An enumerator that allows foreach to be used to process all RPC methods in this collection.
            </returns>
        </member>
        <member name="M:WampSharp.V1.Cra.WampCraAuthenticator`1.GetTopicContainer">
            <summary>
            Gets topic container.
            </summary>
            <returns>The topic container.</returns>
        </member>
        <member name="M:WampSharp.V1.Cra.WampCraAuthenticator`1.AuthReq(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            RPC endpoint for clients to initiate the authentication handshake.
            </summary>
            <seealso cref="M:WampSharp.Cra.IWampCraProcedures.AuthReq(string,IDictionary{string,string})"/>
        </member>
        <member name="M:WampSharp.V1.Cra.WampCraAuthenticator`1.Auth(System.String)">
            <summary>
            RPC endpoint for clients to actually authenticate after requesting authentication and
            computing a signature from the authentication challenge.
            </summary>
            <seealso cref="M:WampSharp.Cra.IWampCraProcedures.Auth(string)"/>
        </member>
        <member name="M:WampSharp.V1.Cra.WampCraAuthenticator`1.GetAuthSecret(System.String)">
            <summary>
            Gets the secret value for the supplied auth key used to hash the challenge.  Return null if
            the key is not found.
            </summary>
            <param name="authKey">Authentication key, such as a user name or application name.</param>
            <returns>The authentication secret.</returns>
        </member>
        <member name="M:WampSharp.V1.Cra.WampCraAuthenticator`1.GetAuthPermissions(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Called to get the permissions the user identified by @authKey BEFORE the user is
            authenticated. A copy of the client's request 'extra' is provided, and you can alter it here.
            This will be passed back to the client as WampCraChallenge.extraAuth and MUST be what is
            actually used for generating the secret.
            </summary>
            <remarks>
            Here is a good place to check/fix something in @extra that is out of whack with the request,
            like capping the number of iterations, or specifying a different (stricter, presumably)
            salting mechanism. I really don't know or understand the purpose of sending available
            endpoints to an unauthenticated user.  These are only used as part of the challenge, and are
            regurgitated to you in OnAuthenticated. I see no reason why you have to return anything here
            (yes, null is fine), and you can do all the work in OnAuthenticated(), including returning
            the real list of permissions.
            </remarks>
            <param name="authKey">Authentication key, such as user name or application name.</param>
            <param name="extra">Extra data for salting the secret. Possible key values 'salt' (required,
            otherwise the secret is unsalted), 'iterations' (1000 default), and/or 'keylen' (32 default).
            You may change these here and the client must use this method of signing.</param>
            <returns>The permissions of the user if successfully authenticated.</returns>
        </member>
        <member name="M:WampSharp.V1.Cra.WampCraAuthenticator`1.OnAuthenticated(System.String,WampSharp.V1.Cra.WampCraPermissions)">
            <summary>
            Called after the user is successfully authenticated.  This call is the last opportunity for
            you to set the WampPermissions, as these will be used to determine rpc and pub/sub operations
            for the remainder of this session.
            </summary>
            <remarks>
            NOTE: Throwing an exception here could put you in a bad state.  We'll send an error to the
            client, and make them unauthenticated in this case.
            </remarks>
            <param name="authKey">Authentication key, such as user name or application name.</param>
            <param name="permissions">The permissions initially granted in the call to
            GetAuthPermissions(). You could change these, and the updated copy is what will be returned
            to the client from its call to auth().</param>
        </member>
        <member name="P:WampSharp.V1.Cra.WampCraAuthenticator`1.AuthKey">
            <summary>
            The authKey provided by the client during the WAMP-CRA authentication request.
            </summary>
            <seealso cref="P:WampSharp.V1.Cra.IWampCraAuthenticator.AuthKey"/>
        </member>
        <member name="P:WampSharp.V1.Cra.WampCraAuthenticator`1.ClientSessionId">
            <summary>
            Gets the sessionId of the connected client.
            </summary>
            <seealso cref="P:WampSharp.V1.Cra.IWampCraAuthenticator.ClientSessionId"/>
        </member>
        <member name="P:WampSharp.V1.Cra.WampCraAuthenticator`1.IsAuthenticated">
            <summary>
            Gets a value indicating whether the user identified by AuthKey is successfully authenticated.
            </summary>
            <seealso cref="P:WampSharp.V1.Cra.IWampCraAuthenticator.IsAuthenticated"/>
        </member>
        <member name="P:WampSharp.V1.Cra.WampCraAuthenticator`1.IsAuthenticationPending">
            <summary>
            Gets a value indicating whether we are waiting for an auth call after an authreq.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Cra.WampCraAuthenticator`1.CraPermissionsMapper">
            <summary>
            Gets the permissions that were sent to the client following a successful authreq call.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Cra.WampCraAuthenticator`1.AllowAnonymous">
            <summary>
            Gets a value indicating whether we allow anonymous logins. An anonymous login is one where
            the authKey is null or an empty string.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Cra.WampCraChallenge">
            <summary>
            This type is returned to the client from a call to IWampCra.authreq().  The client uses the
            JSON as sent in addition to the contents of authextra (if present) to sign the challenge.
            </summary>
            <remarks>As this is defined as part of WAMP-CRA (v1), it should not be changed.</remarks>
        </member>
        <member name="T:WampSharp.V1.Cra.WampCraHelpers">
            <summary>
            WAMP-CRA Authentication Helper methods.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Cra.WampCraHelpers.DeriveKey(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Computes a derived cryptographic key from a password according to PBKDF2
            http://en.wikipedia.org/wiki/PBKDF2. The function will only return a derived key
            if at least 'salt' is present in the 'extra' dictionary. The complete set of
            attributes that can be set in 'extra': 
               salt: The salt value to be used.
               iterations: Number of iterations of derivation algorithm to run. 
               keylen: Key length to derive.
            </summary>
            <param name="secret">The secret key from which to derive. </param>
            <param name="extra"> Extra data for salting the secret. Possible key values 'salt'
            (required, otherwise returns @secret), 'iterations' (1000 default),
            and/or 'keylen' (32 default). </param>
            <returns>A derived key (Base64 encoded) if a salt is provided in the extra parameter, or the
            value of parameter 'secret' if not.</returns>
        </member>
        <member name="M:WampSharp.V1.Cra.WampCraHelpers.AuthSignature(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Compute the authentication signature from an authentication challenge and a secret.
            </summary>
            <param name="authChallenge">The authentication challenge. </param>
            <param name="authSecret">The authentication secret. </param>
            <param name="authExtra">Extra data for salting the secret. Possible key values 'salt'
            (required, otherwise uses @authSecret), 'iterations' (1000
            default), and/or 'keylen' (32 default). </param>
            <returns>The authentication signature.</returns>
        </member>
        <member name="M:WampSharp.V1.Cra.WampCraHelpers.PBKDF2Sha256GetBytes(System.Int32,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Implements PBKDF2 functionality by using a pseudorandom number generator based on
            HMACSHA256.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when one or more arguments are outside
            the required range.
             </exception>
            <param name="dklen">The number of pseudo-random key bytes to generate. </param>
            <param name="password">The password used to derive the key. After use, the password
            and salt should be cleared (with Array.Clear) </param>
            <param name="salt">The key salt used to derive the key. After use, the password
            and salt should be cleared (with Array.Clear) </param>
            <param name="iterationCount">The number of iterations for the operation. The iteration
            count should be as high as possible without causing
            unreasonable delay. </param>
            <returns>A byte array filled with pseudo-random key bytes.</returns>
        </member>
        <member name="T:WampSharp.V1.Cra.WampCraPermissions">
            <summary>
            This type is returned to the client from a successful call to IWampCra.auth().
            </summary>
            <remarks>As this is defined as part of WAMP-CRA (v1), it should not be changed.</remarks>
        </member>
        <member name="T:WampSharp.V1.Rpc.Server.MethodInfoWampRpcMetadata">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.Rpc.Server.IWampRpcMetadata"/> using
            Reflection.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Server.IWampRpcMetadata">
            <summary>
            Represents hosted rpc service metadata.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.IWampRpcMetadata.GetServiceMethods">
            <summary>
            Gets the methods of the current rpc service.
            </summary>
            <returns>The the methods of the current rpc service.</returns>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.MethodInfoWampRpcMetadata.#ctor(System.Object,System.String)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Rpc.Server.MethodInfoWampRpcMetadata"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Server.MethodInfoWampRpcMethod">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.Rpc.Server.IWampRpcMethod"/> using <see cref="P:WampSharp.V1.Rpc.Server.MethodInfoWampRpcMethod.MethodInfo"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Server.IWampRpcMethod">
            <summary>
            Represents a hosted rpc service's method.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.IWampRpcMethod.InvokeAsync(WampSharp.V1.Core.Contracts.IWampClient,System.Object[])">
            <summary>
            Invokes the method asynchronously.
            </summary>
            <param name="client">The <see cref="T:WampSharp.V1.Core.Contracts.IWampClient"/> making the call.</param>
            <param name="parameters">The parameters to invoke with.</param>
            <returns>A task representing the result.</returns>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.IWampRpcMethod.Invoke(WampSharp.V1.Core.Contracts.IWampClient,System.Object[])">
            <summary>
            Invokes the method syncronously.
            </summary>
            <param name="client">The <see cref="T:WampSharp.V1.Core.Contracts.IWampClient"/> making the call. </param>
            <param name="parameters">The parameters to invoke with.</param>
            <returns>The result of the method.</returns>
        </member>
        <member name="P:WampSharp.V1.Rpc.Server.IWampRpcMethod.Name">
            <summary>
            The method's name.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.Server.IWampRpcMethod.ProcUri">
            <summary>
            The method's proc uri.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.Server.IWampRpcMethod.Parameters">
            <summary>
            The types of the method parameters.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.MethodInfoWampRpcMethod.#ctor(System.Object,System.Reflection.MethodInfo,System.String)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Rpc.Server.MethodInfoWampRpcMethod"/>.
            </summary>
            <param name="instance">The instance that this method will use.</param>
            <param name="method">The <see cref="P:WampSharp.V1.Rpc.Server.MethodInfoWampRpcMethod.MethodInfo"/> this method wraps.</param>
            <param name="baseUri">The base uri of the method.</param>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.MethodInfoWampRpcMethod.GetInstance(WampSharp.V1.Core.Contracts.IWampClient)">
            <summary>
            Gets the instance used for <see cref="!:System.Reflection.MethodInfo.Invoke(object, object[])"></see>
            call.
            </summary>
            <param name="client">The <see cref="T:WampSharp.V1.Core.Contracts.IWampClient"/> requesting this call.</param>
            <returns>The instance to use for invocation.</returns>
        </member>
        <member name="P:WampSharp.V1.Rpc.Server.MethodInfoWampRpcMethod.MethodInfo">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> this rpc method
            is bound to.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Cra.WampPubSubPermissions">
            <summary>
            Represents Publish and Subscribe permissions for a Topic URI or URI Prefix.
            </summary>
            <remarks>As this is defined as part of WAMP-CRA (v1), it should not be changed.</remarks>
        </member>
        <member name="M:WampSharp.V1.Cra.WampPubSubPermissions.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="uri">PubSub Topic URI / URI prefix.</param>
            <param name="prefix">URI matched by prefix?</param>
            <param name="pub">Allow to publish?</param>
            <param name="sub">Allow to subscribe?</param>
        </member>
        <member name="P:WampSharp.V1.Cra.WampPubSubPermissions.uri">
            <summary>
            PubSub Topic URI / URI prefix.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Cra.WampPubSubPermissions.prefix">
            <summary>
            URI matched by prefix?
            </summary>
        </member>
        <member name="P:WampSharp.V1.Cra.WampPubSubPermissions.pub">
            <summary>
            Allow to publish?
            </summary>
        </member>
        <member name="P:WampSharp.V1.Cra.WampPubSubPermissions.sub">
            <summary>
            Allow to subscribe?
            </summary>
        </member>
        <member name="T:WampSharp.V1.Cra.WampRpcPermissions">
            <summary>
            Represents RPC call permissions for an endpoint uri.
            </summary>
            <remarks>As this is defined as part of WAMP-CRA (v1), it should not be changed.</remarks>
        </member>
        <member name="M:WampSharp.V1.Cra.WampRpcPermissions.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="uri">RPC Endpoint URI.</param>
            <param name="call">Allow to call?</param>
        </member>
        <member name="P:WampSharp.V1.Cra.WampRpcPermissions.uri">
            <summary>
            RPC Endpoint URI.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Cra.WampRpcPermissions.call">
            <summary>
            Allow to call?
            </summary>
        </member>
        <member name="T:WampSharp.V1.PubSub.Client.IWampPubSubClientFactory`1">
            <summary>
            An interface that allows to consume pub/sub client capabilities.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.PubSub.Client.IWampPubSubClientFactory`1.GetSubject``1(System.String,WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Gets a subject proxy of a given topic uri.
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="topicUri">The given topic uri.</param>
            <param name="connection">The connection the messages are sent through.</param>
            <returns>The requested subject.</returns>
        </member>
        <member name="T:WampSharp.V1.PubSub.Client.IWampServerProxyFactory`1">
            <summary>
            Creates a <see cref="T:WampSharp.V1.Core.Contracts.IWampServer"/> proxy that handles
            <see cref="T:WampSharp.V1.Core.Contracts.IWampPubSubClient`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.PubSub.Client.IWampServerProxyFactory`1.Create(WampSharp.V1.Core.Contracts.IWampPubSubClient{`0},WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Creates a <see cref="T:WampSharp.V1.Core.Contracts.IWampServer"/> that its callbacks will be
            redirecte to a given <see cref="T:WampSharp.V1.Core.Contracts.IWampPubSubClient`1"/>.
            </summary>
            <param name="client">The given <see cref="T:WampSharp.V1.Core.Contracts.IWampPubSubClient`1"/>.</param>
            <param name="connection">The connection to the proxy.</param>
            <returns>The created proxy.</returns>
        </member>
        <member name="T:WampSharp.V1.PubSub.Client.WampPubSubClientFactory`1">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.PubSub.Client.IWampPubSubClientFactory`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.PubSub.Client.WampPubSubClientFactory`1.#ctor(WampSharp.V1.PubSub.Client.IWampServerProxyFactory{`0},WampSharp.Core.Serialization.IWampFormatter{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.PubSub.Client.WampPubSubClientFactory`1"/>.
            </summary>
            <param name="serverProxyFactory">The server proxy factory used to get callbacks.</param>
            <param name="formatter">The formatter used to serialize/deserialize messages.</param>
        </member>
        <member name="T:WampSharp.V1.PubSub.Client.WampPubSubSubject`2">
            <summary>
            Represents a WAMP topic of a given topic uri.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TEvent"></typeparam>
        </member>
        <member name="M:WampSharp.V1.PubSub.Client.WampPubSubSubject`2.#ctor(System.String,WampSharp.V1.PubSub.Client.IWampServerProxyFactory{`0},WampSharp.Core.Listener.IWampConnection{`0},WampSharp.Core.Serialization.IWampFormatter{`0})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.PubSub.Client.WampPubSubSubject`2"/>.
            </summary>
            <param name="topicUri">The topic uri of the current topic.</param>
            <param name="serverProxyFactory">The server proxy factory used to get
            callbacks from the server.</param>
            <param name="connection">The underlying connection this subject uses
            in order to send/receive messages.</param>
            <param name="formatter">The formatter used in order to serialize/deserialize
            the messages sent.</param>
        </member>
        <member name="T:WampSharp.V1.PubSub.Client.WampServerProxyFactory`1">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.PubSub.Client.IWampServerProxyFactory`1"/> using
            <see cref="T:WampSharp.Core.Client.IWampServerProxyBuilder`3"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.PubSub.Client.WampServerProxyFactory`1.#ctor(WampSharp.Core.Client.IWampServerProxyBuilder{`0,WampSharp.V1.Core.Contracts.IWampPubSubClient{`0},WampSharp.V1.Core.Contracts.IWampServer})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.PubSub.Client.WampServerProxyFactory`1"/>.
            </summary>
            <param name="proxyBuilder">The <see cref="T:WampSharp.Core.Client.IWampServerProxyBuilder`3"/>
            used in order to create the server proxy.</param>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampSubscriptionAddEventArgs">
            <summary>
            Represents <see cref="T:System.EventArgs"/> for a new subscription.
            </summary>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampSubscriptionEventArgs">
            <summary>
            Represents <see cref="T:System.EventArgs"/> for WAMP subscription events.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampSubscriptionEventArgs.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampSubscriptionEventArgs"/>.
            </summary>
            <param name="sessionId">The session id of the current subscriber.</param>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.WampSubscriptionEventArgs.SessionId">
            <summary>
            The session id of the subscriber.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampSubscriptionAddEventArgs.#ctor(System.String,System.IObserver{System.Object})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampSubscriptionAddEventArgs"/>.
            </summary>
            <param name="sessionId">The session id of the subscribing client.</param>
            <param name="observer">A proxy to the subscribing client.</param>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.WampSubscriptionAddEventArgs.Observer">
            <summary>
            A proxy to the subscribing client.
            </summary>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampSubscriptionRemoveEventArgs">
            <summary>
            Represnts <see cref="T:System.EventArgs"/> for WAMP subscription removal events.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampSubscriptionRemoveEventArgs.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampSubscriptionRemoveEventArgs"/>.
            </summary>
            <param name="sessionId">The session id of the removed subscriber.</param>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampTopicCreatedEventArgs">
            <summary>
            Represents <see cref="T:System.EventArgs"/> for an event that occurs when a new
            <see cref="T:WampSharp.V1.PubSub.Server.IWampTopic"/> is created.
            </summary>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampTopicEventArgs">
            <summary>
            Represents <see cref="T:System.EventArgs"/> for <see cref="T:WampSharp.V1.PubSub.Server.IWampTopic"/>
            creation/destruction events.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampTopicEventArgs.#ctor(WampSharp.V1.PubSub.Server.IWampTopic)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampTopicEventArgs"/>.
            </summary>
            <param name="topic">The relevant topic.</param>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.WampTopicEventArgs.Topic">
            <summary>
            Gets the relevant topic.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampTopicCreatedEventArgs.#ctor(WampSharp.V1.PubSub.Server.IWampTopic)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampTopicCreatedEventArgs"/>.
            </summary>
            <param name="topic">The created topic.</param>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampTopicRemovedEventArgs">
            <summary>
            Represents <see cref="T:System.EventArgs"/> for <see cref="T:WampSharp.V1.PubSub.Server.IWampTopic"/> destruction
            event.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampTopicRemovedEventArgs.#ctor(WampSharp.V1.PubSub.Server.IWampTopic)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampTopicRemovedEventArgs"/>.
            </summary>
            <param name="topic">The removed topic.</param>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.IWampTopic">
            <summary>
            Represents a WAMP topic, that some clients are subscribed to.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.IWampTopic.Unsubscribe(System.String)">
            <summary>
            Unsubscribes a subscriber given its session id from the topic.
            </summary>
            <param name="sessionId">The subscriber's session id.</param>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.IWampTopic.TopicUri">
            <summary>
            Gets the uri of the topic.
            </summary>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.IWampTopic.Persistent">
            <summary>
            Gets a value indicating whether this topic is persistent.
            </summary>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.IWampTopic.HasObservers">
            <summary>
            Gets a value indicating whether this topic has observers.
            </summary>
        </member>
        <member name="E:WampSharp.V1.PubSub.Server.IWampTopic.SubscriptionAdding">
            <summary>
            Occurs when a new subscription is being added to the topic.
            </summary>
        </member>
        <member name="E:WampSharp.V1.PubSub.Server.IWampTopic.SubscriptionAdded">
            <summary>
            Occurs after a new subscription has been added to the topic.
            </summary>
        </member>
        <member name="E:WampSharp.V1.PubSub.Server.IWampTopic.SubscriptionRemoving">
            <summary>
            Occurs when a subscription is being removed from the topic.
            </summary>
        </member>
        <member name="E:WampSharp.V1.PubSub.Server.IWampTopic.SubscriptionRemoved">
            <summary>
            Occurs after a subscription has been removed from the topic.
            </summary>
        </member>
        <member name="E:WampSharp.V1.PubSub.Server.IWampTopic.TopicEmpty">
            <summary>
            Occurs when the topic is empty.
            </summary>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.IWampTopicContainer">
            <summary>
            Represents a container for <see cref="T:WampSharp.V1.PubSub.Server.IWampTopic"/>s.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.IWampTopicContainer.CreateTopicByUri(System.String,System.Boolean)">
            <summary>
            Creates and adds a topic to the container given its uri.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <param name="persistent">A value indicating whether the topic is persistent.</param>
            <returns>The created topic.</returns>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.IWampTopicContainer.GetOrCreateTopicByUri(System.String,System.Boolean)">
            <summary>
            Gets or creates a topic given its uri.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <param name="persistent">A value indicating whether the topic is persistent.</param>
            <returns>The requested topic.</returns>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.IWampTopicContainer.GetTopicByUri(System.String)">
            <summary>
            Gets a topic given it uri.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <returns>The requested topic.</returns>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.IWampTopicContainer.TryRemoveTopicByUri(System.String,WampSharp.V1.PubSub.Server.IWampTopic@)">
            <summary>
            Tries to remove a topic given its uri.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <param name="topic">The removed topic.</param>
            <returns>A value indicating whether the removal succeeded.</returns>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.IWampTopicContainer.TopicUris">
            <summary>
            Gets the uris of the topics present in the container.
            </summary>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.IWampTopicContainer.Topics">
            <summary>
            Gets the topics currently present in the container.
            </summary>
        </member>
        <member name="E:WampSharp.V1.PubSub.Server.IWampTopicContainer.TopicCreated">
            <summary>
            Occurs when a new topic is created.
            </summary>
        </member>
        <member name="E:WampSharp.V1.PubSub.Server.IWampTopicContainer.TopicRemoved">
            <summary>
            Occurs when a topic is removed.
            </summary>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.IWampTopicContainerExtended`1">
            <summary>
            A <see cref="T:WampSharp.V1.PubSub.Server.IWampTopicContainer"/> with extra thread-safe
            functionality.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.IWampTopicContainerExtended`1.Subscribe(System.String,System.IObserver{System.Object})">
            <summary>
            Subscribes to a topic given its uri.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <param name="observer">The observer to subscribe to the topic with.</param>
            <returns>A disposable used to unsubscribe from the topic.</returns>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.IWampTopicContainerExtended`1.Unsubscribe(System.String,System.String)">
            <summary>
            Unsubscribes an observer from the topic given its session id.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <param name="sessionId">The observer's session id.</param>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.IWampTopicContainerExtended`1.Publish(System.String,`0,System.String[],System.String[])">
            <summary>
            Publishes an event to a given topic.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <param name="event">The event to publish.</param>
            <param name="exclude">An array of excluded subscribers' session ids.</param>
            <param name="eligible">An array of eligible subscribers' session ids.</param>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampNotification">
            <summary>
            Represents a <see cref="T:WampSharp.V1.PubSub.Server.IWampTopic"/>'s publication.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampNotification.#ctor(System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampNotification"/>.
            </summary>
            <param name="event">The event to publish</param>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampNotification.#ctor(System.Object,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampNotification"/>.
            </summary>
            <param name="event">The event to publish</param>
            <param name="excluded">A collection of excluded observers' session ids.</param>
            <param name="eligible">A collection of eligible observers' session ids.</param>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.WampNotification.Event">
            <summary>
            Gets the published event.
            </summary>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.WampNotification.Excluded">
            <summary>
            Gets a collection of excluded observers' session ids.
            </summary>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.WampNotification.Eligible">
            <summary>
            Gets a collection of eligible observers' session ids.
            </summary>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampObserver">
            <summary>
            Represents a proxy to a topic's subscriber.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampObserver.#ctor(System.String,WampSharp.V1.Core.Contracts.IWampClient)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampObserver"/>.
            </summary>
            <param name="topicUri">The uri of the topic the observer belongs to.</param>
            <param name="client">The proxy to the client.</param>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.WampObserver.SessionId">
            <summary>
            Gets the session id of the client.
            </summary>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.WampObserver.Client">
            <summary>
            Gets a proxy to the client.
            </summary>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampPubSubServer`1">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.PubSub.Server.WampPubSubServer`1"/>
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampPubSubServer`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampPubSubServer`1"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampPubSubServer`1.#ctor(WampSharp.V1.PubSub.Server.IWampTopicContainerExtended{`0})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampPubSubServer`1"/>.
            </summary>
            <param name="container">The <see cref="T:WampSharp.V1.PubSub.Server.IWampTopicContainerExtended`1"/>
            the server will work against.</param>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.WampPubSubServer`1.TopicContainer">
            <summary>
            Gets the <see cref="T:WampSharp.V1.PubSub.Server.IWampTopicContainer"/> this server works against.
            </summary>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampTopic">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.PubSub.Server.IWampTopic"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampTopic.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampTopic"/>.
            </summary>
            <param name="topicUri">The uri of the topic.</param>
            <param name="persistent">A value indicating whether the topic is persistent.</param>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampTopicContainer`1">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.PubSub.Server.IWampTopicContainerExtended`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampTopicContainer`1.#ctor">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampTopicContainer`1"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.DynamicWampRpcClient">
            <summary>
            A dynamic rpc client. 
            Allows to call rpc methods without having a given interface.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.DynamicWampRpcClient.#ctor(WampSharp.V1.Rpc.Client.IWampRpcClientHandler,WampSharp.V1.Rpc.Client.IWampRpcSerializer)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Rpc.Client.DynamicWampRpcClient"/>.
            </summary>
            <param name="clientHandler">The <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcClientHandler"/>
            that will deal rpc calls.</param>
            <param name="serializer">The <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcSerializer"/> that will serialize
            RPC calls.</param>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampRpcMethodInfo">
            <summary>
            An implementation of <see cref="T:System.Reflection.MethodInfo"/> for
            <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcSerializer"/> and
            <see cref="T:WampSharp.V1.Rpc.Client.IWampProcUriMapper"/>.
            </summary>
            <remarks>
            This class was written because I think that it is a better solution
            than creating a structure that describes methods or creating overloads
            for these interfaces that receive method name and return type.
            </remarks>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.IWampProcUriMapper">
            <summary>
            Maps WAMP RPC method calls to their corresponding
            uris.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.IWampProcUriMapper.Map(System.Reflection.MethodInfo)">
            <summary>
            Maps the given method to its corresponding uri.
            </summary>
            <param name="method">The given method.</param>
            <returns>The method's corresponding uri.</returns>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.IWampRpcClientFactory`1">
            <summary>
            An interface that allows to consume rpc client capabilities.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.IWampRpcClientFactory`1.GetClient``1(WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Gets a proxy to the given interface on the given connection.
            </summary>
            <typeparam name="TProxy"></typeparam>
            <param name="connection">The given connection.</param>
            <returns>The created proxy.</returns>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.IWampRpcClientFactory`1.GetDynamicClient(WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Gets a dynamic proxy on the given connection.
            </summary>
            <param name="connection">The given connection.</param>
            <returns>The created proxy.</returns>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.IWampRpcClientHandler">
            <summary>
            Handles outgoing RPC calls.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.IWampRpcClientHandler.Handle(WampSharp.V1.Rpc.Client.WampRpcCall)">
            <summary>
            Handles synchronous rpc calls.
            </summary>
            <param name="rpcCall">The given rpc call.</param>
            <returns>The result of the call.</returns>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.IWampRpcClientHandler.HandleAsync(WampSharp.V1.Rpc.Client.WampRpcCall)">
            <summary>
            Handles asynchronous rpc calls.
            </summary>
            <param name="rpcCall">The given rpc call.</param>
            <returns>The a task that represents result of the call.</returns>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.IWampRpcClientHandlerBuilder`1">
            <summary>
            Builds a <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcClientHandler"/> given a connection.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.IWampRpcClientHandlerBuilder`1.Build(WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Builds a <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcClientHandler"/> given a <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/>.
            </summary>
            <param name="connection">The given <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/>.</param>
            <returns>The built <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcClientHandler"/>.</returns>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.IWampRpcSerializer">
            <summary>
            Serializes proxy method calls to <see cref="T:WampSharp.V1.Rpc.Client.WampRpcCall"/>s.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.IWampRpcSerializer.Serialize(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Serializes a proxy method call to a <see cref="T:WampSharp.V1.Rpc.Client.WampRpcCall"/>.
            </summary>
            <param name="method">The called method.</param>
            <param name="arguments">The call arguments.</param>
            <returns>The serialized <see cref="T:WampSharp.V1.Rpc.Client.WampRpcCall"/>.</returns>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.IWampServerProxyFactory`1">
            <summary>
            Creates a <see cref="T:WampSharp.V1.Core.Contracts.IWampServer"/> proxy that handles
            <see cref="T:WampSharp.V1.Core.Contracts.IWampRpcClient`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.IWampServerProxyFactory`1.Create(WampSharp.V1.Core.Contracts.IWampRpcClient{`0},WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Creates a <see cref="T:WampSharp.V1.Core.Contracts.IWampServer"/> that its callbacks will be
            redirecte to a given <see cref="T:WampSharp.V1.Core.Contracts.IWampRpcClient`1"/>.
            </summary>
            <param name="client">The given <see cref="T:WampSharp.V1.Core.Contracts.IWampRpcClient`1"/>.</param>
            <param name="connection">The connection to the proxy.</param>
            <returns>The created proxy.</returns>
        </member>
        <member name="M:WampSharp.Core.Utilities.TaskExtensions.UnwrapReturnType(System.Type)">
            <summary>
            Unwraps the return type of a given method.
            </summary>
            <param name="returnType">The given return type.</param>
            <returns>The unwrapped return type.</returns>
            <example>
            void, Task -> object
            Task{string} -> string
            int -> int
            </example>
        </member>
        <member name="M:WampSharp.Core.Utilities.TaskExtensions.CastTask(System.Threading.Tasks.Task)">
            <summary>
            Casts a <see cref="T:System.Threading.Tasks.Task"/> to a Task of type Task{object}.
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampRpcCall">
            <summary>
            Represents a WAMP rpc call.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.Client.WampRpcCall.CallId">
            <summary>
            The call id of the this call.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.Client.WampRpcCall.ProcUri">
            <summary>
            The proc uri to call.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.Client.WampRpcCall.Arguments">
            <summary>
            The arguments sent with the call.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.Client.WampRpcCall.ReturnType">
            <summary>
            The expected return type of the call.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampRpcClientInterceptor">
            <summary>
            A base class interceptor for both synchronous and asynchronous
            rpc calls.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.WampRpcClientInterceptor.#ctor(WampSharp.V1.Rpc.Client.IWampRpcSerializer,WampSharp.V1.Rpc.Client.IWampRpcClientHandler)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Rpc.Client.WampRpcClientHandlerBuilder`1"/>.
            </summary>
            <param name="serializer"></param>
            <param name="clientHandler"></param>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.WampRpcClientInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Implementation of <see cref="M:Castle.DynamicProxy.IInterceptor.Intercept(Castle.DynamicProxy.IInvocation)"/>.
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="P:WampSharp.V1.Rpc.Client.WampRpcClientInterceptor.Serializer">
            <summary>
            The serializer used in order to serialize method calls.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.Client.WampRpcClientInterceptor.ClientHandler">
            <summary>
            The <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcClientHandler"/> use in order
            to handle serialized <see cref="T:WampSharp.V1.Rpc.Client.WampRpcCall"/>s.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampRpcClientFactory`1">
            <summary>
            A default implementation of <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcClientFactory`1"/>
            using dynamic proxy.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.WampRpcClientFactory`1.#ctor(WampSharp.V1.Rpc.Client.IWampRpcSerializer,WampSharp.V1.Rpc.Client.IWampRpcClientHandlerBuilder{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Rpc.Client.WampRpcClientFactory`1"/>.
            </summary>
            <param name="serializer">The <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcSerializer"/> used
            in order to serialize RPC calls.</param>
            <param name="clientHandlerBuilder">The <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcClientHandlerBuilder`1"/>
            used in order to build the handler that handles the <see cref="T:WampSharp.V1.Rpc.Client.WampRpcCall"/>s.</param>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampRpcClientHandler`1">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcClientHandler"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.WampRpcClientHandler`1.#ctor(WampSharp.V1.Rpc.Client.IWampServerProxyFactory{`0},WampSharp.Core.Listener.IWampConnection{`0},WampSharp.Core.Serialization.IWampFormatter{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Rpc.Client.WampRpcClientHandler`1"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampRpcClientHandlerBuilder`1">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcClientHandlerBuilder`1"/>
            using <see cref="T:WampSharp.V1.Rpc.Client.WampRpcClientHandler`1"/>
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.WampRpcClientHandlerBuilder`1.#ctor(WampSharp.Core.Serialization.IWampFormatter{`0},WampSharp.V1.Rpc.Client.IWampServerProxyFactory{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Rpc.Client.WampRpcClientHandler`1"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampRpcClientInterceptorSelector">
            <summary>
            Selects the right <see cref="T:WampSharp.V1.Rpc.Client.WampRpcClientInterceptor"/> based
            on whether the method is synchronous or asynchronous.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampRpcMethodAttributeProcUriMapper">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.Rpc.Client.IWampProcUriMapper"/> based on
            <see cref="T:WampSharp.V1.Rpc.WampRpcMethodAttribute"/>s.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampRpcRequest">
            <summary>
            Represents a RPC request that is currently
            in progress.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.Client.WampRpcRequest.Task">
            <summary>
            A task used in order to notify when
            result arrived.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.Client.WampRpcRequest.Request">
            <summary>
            The original request.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampRpcSerializer">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcSerializer"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.WampRpcSerializer.#ctor(WampSharp.V1.Rpc.Client.IWampProcUriMapper)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Rpc.Client.WampRpcSerializer"/>.
            </summary>
            <param name="procUriMapper">A given <see cref="T:WampSharp.V1.Rpc.Client.IWampProcUriMapper"/>
            used in order to map called methods to their corresponding
            uris.</param>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampServerProxyFactory`1">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.Rpc.Client.IWampServerProxyFactory`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.WampServerProxyFactory`1.#ctor(WampSharp.Core.Client.IWampServerProxyBuilder{`0,WampSharp.V1.Core.Contracts.IWampRpcClient{`0},WampSharp.V1.Core.Contracts.IWampServer})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Rpc.Client.WampServerProxyFactory`1"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Server.IWampRpcMetadataCatalog">
            <summary>
            Represents a catalog of hosted rpc services.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.IWampRpcMetadataCatalog.Register(WampSharp.V1.Rpc.Server.IWampRpcMetadata)">
            <summary>
            Registers a new rpc service to the catalog
            given its metadata.
            </summary>
            <param name="metadata">The given service's metadata.</param>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.IWampRpcMetadataCatalog.Unregister(WampSharp.V1.Rpc.Server.IWampRpcMethod)">
            <summary>
            Unregisters a rpc method from the catalog
            </summary>
            <param name="method">The given method to unregister.</param>
            <returns>A value indicating whether the method was removed 
            successfully.</returns>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.IWampRpcMetadataCatalog.ResolveMethodByProcUri(System.String)">
            <summary>
            Maps a given proc uri to its corresponding metadata.
            </summary>
            <param name="procUri">The given proc uri.</param>
            <returns>The corresponding metadata.</returns>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.IWampRpcMetadataCatalog.GetAllRpcMethods">
            <summary>
            Gets all registered RPC methods.
            </summary>
            <returns>All registered RPC methods.</returns>
        </member>
        <member name="T:WampSharp.V1.Rpc.Server.ProcUriAlreadyMappedException">
            <summary>
            Indicates that a given proc uri is already mapped in
            <see cref="T:WampSharp.V1.Rpc.Server.IWampRpcMetadataCatalog"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.ProcUriAlreadyMappedException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Rpc.Server.ProcUriAlreadyMappedException"/>.
            </summary>
            <param name="procUri">The given proc uri.</param>
        </member>
        <member name="T:WampSharp.V1.Rpc.Server.WampRpcMetadataCatalog">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.Rpc.Server.IWampRpcMetadataCatalog"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.WampRpcMetadataCatalog.#ctor">
            <summary>
            A default constructor.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Server.WampRpcServer`1">
            <summary>
            An server-side implementation of <see cref="T:WampSharp.V1.Core.Contracts.IWampRpcServer`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.WampRpcServer`1.#ctor(WampSharp.Core.Serialization.IWampFormatter{`0},WampSharp.V1.Rpc.Server.IWampRpcMetadataCatalog)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.Rpc.Server.WampRpcServer`1"/>.
            </summary>
            <param name="formatter">The <see cref="T:WampSharp.Core.Serialization.IWampFormatter`1"/>
            used in order to deserialize method arguments.</param>
            <param name="rpcMetadataCatalog">The <see cref="T:WampSharp.V1.Rpc.Server.IWampRpcMetadataCatalog"/>
            used in order to map calls to their corresponding methods.</param>
        </member>
        <member name="T:WampSharp.V1.Rpc.WampRpcCallException">
            <summary>
            An exception having details that will be sent
            through a CALLERROR WAMP message.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.WampRpcCallException.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.Rpc.WampRpcCallException"/>.
            </summary>
            <param name="errorUri"><see cref="P:WampSharp.V1.Rpc.WampRpcCallException.ErrorUri"/></param>
            <param name="errorDesc">The error description, <see cref="P:System.Exception.Message"/>.</param>
            <param name="errorDetails"><see cref="P:WampSharp.V1.Rpc.WampRpcCallException.ErrorDetails"/></param>
        </member>
        <member name="M:WampSharp.V1.Rpc.WampRpcCallException.#ctor(System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.Rpc.WampRpcCallException"/>.
            </summary>
            <param name="procUri"><see cref="P:WampSharp.V1.Rpc.WampRpcCallException.ProcUri"/></param>
            <param name="callId"><see cref="P:WampSharp.V1.Rpc.WampRpcCallException.CallId"/></param>
            <param name="errorUri"><see cref="P:WampSharp.V1.Rpc.WampRpcCallException.ErrorUri"/></param>
            <param name="errorDesc">The error description, <see cref="P:System.Exception.Message"/>.</param>
            <param name="errorDetails"><see cref="P:WampSharp.V1.Rpc.WampRpcCallException.ErrorDetails"/></param>
        </member>
        <member name="P:WampSharp.V1.Rpc.WampRpcCallException.ProcUri">
            <summary>
            The called method's proc uri.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.WampRpcCallException.CallId">
            <summary>
            The call id of the WAMP CALL.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.WampRpcCallException.ErrorUri">
            <summary>
            The error uri.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.WampRpcCallException.ErrorDetails">
            <summary>
            The error details.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.WampRpcMethodAttribute">
            <summary>
            Indicates a method is a WAMP rpc service method.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.WampRpcMethodAttribute.#ctor(System.String)">
            <summary>
            Intializes a new instance of <see cref="T:WampSharp.V1.Rpc.WampRpcMethodAttribute"/>.
            </summary>
            <param name="procUri"></param>
        </member>
        <member name="P:WampSharp.V1.Rpc.WampRpcMethodAttribute.ProcUri">
            <summary>
            The proc uri of this method.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.WampRpcMethodAttribute.IsRelative">
            <summary>
            Gets/sets a value indicating whether the proc uri is
            relative to a base uri or not.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Rpc.IWampRawRpcOperationClientCallback">
            <summary>
            Represents a callback for a WAMP rpc operation that lives outside the router.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Rpc.IWampRawRpcOperationCallback`1">
            <summary>
            Represents a callback for a <see cref="T:WampSharp.V2.Rpc.IWampRpcOperation"/>.
            </summary>
            <typeparam name="TDetailsOptions"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRawRpcOperationCallback`1.Result``1(WampSharp.Core.Serialization.IWampFormatter{``0},`0)">
            <summary>
            Occurs when a result has arrived.
            </summary>
            <param name="formatter">The formatter the can be used to deserialize arguments.</param>
            <param name="details">The details associated with this result.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRawRpcOperationCallback`1.Result``1(WampSharp.Core.Serialization.IWampFormatter{``0},`0,``0[])">
            <summary>
            Occurs when a result has arrived.
            </summary>
            <param name="formatter">The formatter the can be used to deserialize arguments.</param>
            <param name="details">The details associated with this result.</param>
            <param name="arguments">The arguments associated with this result.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRawRpcOperationCallback`1.Result``1(WampSharp.Core.Serialization.IWampFormatter{``0},`0,``0[],System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Occurs when a result has arrived.
            </summary>
            <param name="formatter">The formatter the can be used to deserialize arguments.</param>
            <param name="details">The details associated with this result.</param>
            <param name="arguments">The arguments associated with this result.</param>
            <param name="argumentsKeywords">The arguments keywords associated with this result.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRawRpcOperationCallback`1.Error``1(WampSharp.Core.Serialization.IWampFormatter{``0},``0,System.String)">
            <summary>
            Occurs when an error has occured.
            </summary>
            <param name="formatter">The formatter that can be used to deserialize arguments.</param>
            <param name="details">The details associated with this error.</param>
            <param name="error">The error uri.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRawRpcOperationCallback`1.Error``1(WampSharp.Core.Serialization.IWampFormatter{``0},``0,System.String,``0[])">
            <summary>
            Occurs when an error has occured.
            </summary>
            <param name="formatter">The formatter that can be used to deserialize arguments.</param>
            <param name="details">The details associated with this error.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The arguments associated with this error.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRawRpcOperationCallback`1.Error``1(WampSharp.Core.Serialization.IWampFormatter{``0},``0,System.String,``0[],``0)">
            <summary>
            Occurs when an error has occured.
            </summary>
            <param name="formatter">The formatter that can be used to deserialize arguments.</param>
            <param name="details">The details associated with this error.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The arguments associated with this error.</param>
            <param name="argumentsKeywords">The arguments keywords associated with this error.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.PubSub.IWampRawTopicRouterSubscriber">
            <summary>
            Represents a topic subscriber that lives in the same process as the router.
            </summary>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampRawTopicRouterSubscriber.Event``1(WampSharp.Core.Serialization.IWampFormatter{``0},System.Int64,WampSharp.V2.Core.Contracts.PublishOptions)">
            <summary>
            Occurs when an event arrives.
            </summary>
            <param name="formatter">The formatted this event can be deserialized with.</param>
            <param name="publicationId">The publication id of this event.</param>
            <param name="options">The publication options.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampRawTopicRouterSubscriber.Event``1(WampSharp.Core.Serialization.IWampFormatter{``0},System.Int64,WampSharp.V2.Core.Contracts.PublishOptions,``0[])">
            <summary>
            Occurs when an event arrives.
            </summary>
            <param name="formatter">The formatted this event can be deserialized with.</param>
            <param name="publicationId">The publication id of this event.</param>
            <param name="options">The publication options.</param>
            <param name="arguments">The arguments of this event.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampRawTopicRouterSubscriber.Event``1(WampSharp.Core.Serialization.IWampFormatter{``0},System.Int64,WampSharp.V2.Core.Contracts.PublishOptions,``0[],System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Occurs when an event arrives.
            </summary>
            <param name="formatter">The formatted this event can be deserialized with.</param>
            <param name="publicationId">The publication id of this event.</param>
            <param name="options">The publication options.</param>
            <param name="arguments">The arguments of this event.</param>
            <param name="argumentsKeywords">The argument keywords of this event.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.WampHostExtensions">
            <summary>
            Extension methods for <see cref="T:WampSharp.V2.IWampHost"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.WampHostExtensions.RegisterTransport(WampSharp.V2.IWampHost,WampSharp.V2.Binding.Transports.IWampTransport,WampSharp.V2.Binding.IWampBinding[])">
            <summary>
            Registers a given transport for a given host.
            </summary>
            <param name="host">The given host.</param>
            <param name="transport">The given transport to register.</param>
            <param name="binding">The given bindings to activate support with the given transport.</param>
        </member>
        <member name="T:WampSharp.V2.Client.IWampClientConnectionMonitor">
            <summary>
            Contains events of connection status.
            </summary>
        </member>
        <member name="E:WampSharp.V2.Client.IWampClientConnectionMonitor.ConnectionEstablished">
            <summary>
            Occurs when a connection is established.
            </summary>
        </member>
        <member name="E:WampSharp.V2.Client.IWampClientConnectionMonitor.ConnectionBroken">
            <summary>
            Occurs when a connection is broken.
            </summary>
        </member>
        <member name="E:WampSharp.V2.Client.IWampClientConnectionMonitor.ConnectionError">
            <summary>
            Occurs when a connection is faulted.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.EventDetails">
            <summary>
            Represents details for EVENT message.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.WampDetailsOptions">
            <summary>
            An abstract class for WampDetails/WampOptions types.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.WampDetailsOptions.OriginalValue">
            <summary>
            The original (serialized) received value.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.EventDetails.Publisher">
            <summary>
            Gets or sets the publisher id of this publication.
            </summary>
        </member>
        <member name="T:WampSharp.V2.PubSub.IWampCustomizedSubscriptionId">
            <summary>
            Represents an id for a subscription to a WAMP topic.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Realm.IWampHostedRealmContainer">
            <summary>
            Represents a container of <see cref="T:WampSharp.V2.Realm.IWampHostedRealm"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Realm.IWampHostedRealmContainer.GetRealmByName(System.String)">
            <summary>
            Gets a realm by its name.
            </summary>
            <param name="name">The requested ream name.</param>
            <returns>The request realm.</returns>
        </member>
        <member name="T:WampSharp.V2.IWampHost">
            <summary>
            Represents a WAMP host.
            </summary>
        </member>
        <member name="M:WampSharp.V2.IWampHost.RegisterTransport(WampSharp.V2.Binding.Transports.IWampTransport,System.Collections.Generic.IEnumerable{WampSharp.V2.Binding.IWampBinding})">
            <summary>
            Registers a given transport for this host.
            </summary>
            <param name="transport">The given transport to register.</param>
            <param name="binding">The given bindings to activate support with the given transport.</param>
        </member>
        <member name="M:WampSharp.V2.IWampHost.Open">
            <summary>
            Opens this host.
            </summary>
        </member>
        <member name="P:WampSharp.V2.IWampHost.RealmContainer">
            <summary>
            Gets a realm container associated with this host.
            </summary>
        </member>
        <member name="T:WampSharp.V2.PubSub.IWampRawTopicClientSubscriber">
            <summary>
            Represents a topic subscriber that lives outside a router process.
            </summary>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampRawTopicClientSubscriber.Event``1(WampSharp.Core.Serialization.IWampFormatter{``0},System.Int64,WampSharp.V2.Core.Contracts.EventDetails)">
            <summary>
            Occurs when an incoming event is avilable.
            </summary>
            <param name="formatter">A formatter that can be used to deserialize event arguments.</param>
            <param name="publicationId">The publication id of the incoming publication.</param>
            <param name="details">The details about this publication.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampRawTopicClientSubscriber.Event``1(WampSharp.Core.Serialization.IWampFormatter{``0},System.Int64,WampSharp.V2.Core.Contracts.EventDetails,``0[])">
            <summary>
            Occurs when an incoming event is avilable.
            </summary>
            <param name="formatter">A formatter that can be used to deserialize event arguments.</param>
            <param name="publicationId">The publication id of the incoming publication.</param>
            <param name="details">The details about this publication.</param>
            <param name="arguments">The arguments of this publication.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampRawTopicClientSubscriber.Event``1(WampSharp.Core.Serialization.IWampFormatter{``0},System.Int64,WampSharp.V2.Core.Contracts.EventDetails,``0[],System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Occurs when an incoming event is avilable.
            </summary>
            <param name="formatter">A formatter that can be used to deserialize event arguments.</param>
            <param name="publicationId">The publication id of the incoming publication.</param>
            <param name="details">The details about this publication.</param>
            <param name="arguments">The arguments of this publication.</param>
            <param name="argumentsKeywords">The arguments keywords of this publication.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.IWampSubject">
            <summary>
            Represents a <see cref="T:System.Reactive.Subjects.ISubject`2"/> that publishes/receives messages
            via a WAMP topic.
            </summary>
        </member>
        <member name="T:WampSharp.V2.WampEvent">
            <summary>
            A default implementation of <see cref="T:WampSharp.V2.IWampEvent"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V2.IWampEvent">
            <summary>
            Represents a event that can be published via a <see cref="T:WampSharp.V2.IWampSubject"/>.
            </summary>
        </member>
        <member name="P:WampSharp.V2.IWampEvent.Options">
            <summary>
            The publication objects.
            </summary>
        </member>
        <member name="P:WampSharp.V2.IWampEvent.Arguments">
            <summary>
            The publication arguments.
            </summary>
        </member>
        <member name="P:WampSharp.V2.IWampEvent.ArgumentsKeywords">
            <summary>
            The publication arguments keywords.
            </summary>
        </member>
        <member name="T:WampSharp.V2.ISerializedValue">
            <summary>
            Represents a serialized value.
            </summary>
            <remarks>
            This allows users to work with serialized values without using a
            <see cref="T:WampSharp.Core.Serialization.IWampFormatter`1"/>.
            </remarks>
        </member>
        <member name="M:WampSharp.V2.ISerializedValue.Deserialize``1">
            <summary>
            Deserializes the underlying value to the given type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:WampSharp.V2.ISerializedValue.Deserialize(System.Type)">
            <summary>
            Deserializes the underlying value to the given type.
            </summary>
            <param name="type">The deserialized type.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="T:WampSharp.V2.IWampRealmServiceProvider">
            <summary>
            Represents services for a WAMP realm.
            </summary>
        </member>
        <member name="M:WampSharp.V2.IWampRealmServiceProvider.RegisterCallee(System.Object)">
            <summary>
            Registers an instance of a type having methods decorated with
            <see cref="T:WampSharp.V2.Rpc.WampProcedureAttribute"/> to the realm.
            </summary>
            <param name="instance">The instance to register.</param>
            <returns>A task that is completed when all methods are registered.</returns>
        </member>
        <member name="M:WampSharp.V2.IWampRealmServiceProvider.GetCalleeProxy``1">
            <summary>
            Gets a proxy of a callee registered in the realm.
            </summary>
            <typeparam name="TProxy"></typeparam>
            <returns>The proxy to the callee.</returns>
        </member>
        <member name="M:WampSharp.V2.IWampRealmServiceProvider.GetSubject``1(System.String)">
            <summary>
            Gets a <see cref="T:System.Reactive.Subjects.ISubject`1"/> representing a
            WAMP topic in the realm.
            </summary>
            <param name="topicUri">The WAMP topic uri.</param>
            <typeparam name="TEvent"></typeparam>
            <returns>The requested subject.</returns>
        </member>
        <member name="M:WampSharp.V2.IWampRealmServiceProvider.GetSubject(System.String)">
            <summary>
            Gets a <see cref="T:WampSharp.V2.IWampSubject"/> representing a WAMP topic
            in the realm.
            </summary>
            <param name="topicUri">The WAMP topic uri.</param>
            <returns>The requested subject.</returns>
        </member>
        <member name="T:WampSharp.V2.IWampSerializedEvent">
            <summary>
            Represents a raw form of an event received from a WAMP topic.
            </summary>
        </member>
        <member name="P:WampSharp.V2.IWampSerializedEvent.PublicationId">
            <summary>
            Gets the publication id of this event.
            </summary>
        </member>
        <member name="P:WampSharp.V2.IWampSerializedEvent.Details">
            <summary>
            Gets the details associated with this event.
            </summary>
        </member>
        <member name="P:WampSharp.V2.IWampSerializedEvent.Arguments">
            <summary>
            Gets the arguments of this event.
            </summary>
        </member>
        <member name="P:WampSharp.V2.IWampSerializedEvent.ArgumentsKeywords">
            <summary>
            Gets the arguments keywords of this event.
            </summary>
        </member>
        <member name="T:WampSharp.V2.WampBindingHost`1">
            <summary>
            A default implementation of <see cref="T:WampSharp.V2.Binding.IWampBindingHost"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Binding.IWampBindingHost">
            <summary>
            Represents a host for a specific <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.
            </summary>
            TODO: Get rid of this?
        </member>
        <member name="M:WampSharp.V2.Binding.IWampBindingHost.Open">
            <summary>
            Opens the host, so it starts listening for messages.
            </summary>
        </member>
        <member name="M:WampSharp.V2.WampBindingHost`1.#ctor(WampSharp.V2.Realm.IWampHostedRealmContainer,WampSharp.Core.Listener.IWampConnectionListener{`0},WampSharp.V2.Binding.IWampBinding{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V2.WampBindingHost`1"/>
            </summary>
            <param name="realmContainer">The <see cref="T:WampSharp.V2.Realm.IWampRealmContainer"/> this binding host
            is associated with.</param>
            <param name="connectionListener">The <see cref="T:WampSharp.Core.Listener.IWampConnectionListener`1"/> this 
            binding host listens to.</param>
            <param name="binding">The <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/> associated with this binding host.</param>
        </member>
        <member name="T:WampSharp.V2.WampHost">
            <summary>
            A default implementation of <see cref="T:WampSharp.V2.IWampHost"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.WampHost.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V2.WampHost"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.WampHost.#ctor(WampSharp.V2.Realm.IWampRealmContainer)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V2.WampHost"/> given the
            <see cref="T:WampSharp.V2.Realm.IWampRealmContainer"/> associated with this host.
            </summary>
            <param name="realmContainer"></param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampServer`1">
            <summary>
            Represents all methods defined for a WAMP2 router.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampSessionServer`1">
            <summary>
            Handles WAMP2 session server messages.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSessionServer`1.OnNewClient(WampSharp.V2.Core.Contracts.IWampClient{`0})">
            <summary>
            Occurs when a new client connects.
            </summary>
            <param name="client">The new connected client.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSessionServer`1.OnClientDisconnect(WampSharp.V2.Core.Contracts.IWampClient{`0})">
            <summary>
            Occurs when a client disconnects.
            </summary>
            <param name="client">The disconnected client.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampDealer`1">
            <summary>
            Handles messages of a WAMP2 dealer.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <remarks>These messages are part of the WAMP2 specification.</remarks>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealer`1.Register(WampSharp.V2.Core.Contracts.IWampCallee,System.Int64,WampSharp.V2.Core.Contracts.RegisterOptions,System.String)">
            <summary>
            Occurs when a REGISTER message arrives.
            </summary>
            <param name="callee">The callee that sent this message.</param>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The request options.</param>
            <param name="procedure">The uri of the procedure to register.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealer`1.Unregister(WampSharp.V2.Core.Contracts.IWampCallee,System.Int64,System.Int64)">
            <summary>
            Occurs when an UNREGISTER message arrives.
            </summary>
            <param name="callee">The callee that sent this message.</param>
            <param name="requestId">The request id of the message.</param>
            <param name="registrationId">The registration id of the registration to remove.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealer`1.Call(WampSharp.V2.Core.Contracts.IWampCaller,System.Int64,WampSharp.V2.Core.Contracts.CallOptions,System.String)">
            <summary>
            Occurs when a CALL message arrives.
            </summary>
            <param name="caller">The caller that sent this message.</param>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The call request options.</param>
            <param name="procedure">The uri of the procedure to call.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealer`1.Call(WampSharp.V2.Core.Contracts.IWampCaller,System.Int64,WampSharp.V2.Core.Contracts.CallOptions,System.String,`0[])">
            <summary>
            Occurs when a CALL message arrives.
            </summary>
            <param name="caller">The caller that sent this message.</param>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The call request options.</param>
            <param name="procedure">The uri of the procedure to call.</param>
            <param name="arguments">The arguments of the procedure to call.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealer`1.Call(WampSharp.V2.Core.Contracts.IWampCaller,System.Int64,WampSharp.V2.Core.Contracts.CallOptions,System.String,`0[],System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Occurs when a CALL message arrives.
            </summary>
            <param name="caller">The caller that sent this message.</param>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The call request options.</param>
            <param name="procedure">The uri of the procedure to call.</param>
            <param name="arguments">The arguments of the procedure to call.</param>
            <param name="argumentsKeywords">The argument keywords of the procedure to call.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealer`1.Cancel(WampSharp.V2.Core.Contracts.IWampCaller,System.Int64,WampSharp.V2.Core.Contracts.CancelOptions)">
            <summary>
            Occurs when a CANCEL message arrives.
            </summary>
            <param name="caller">The caller that sent this message.</param>
            <param name="requestId">The request id of the call to cancel.</param>
            <param name="options">Additional options for cancelation.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampRpcInvocationCallback`1">
            <summary>
            Handles WAMP2 dealer YIELD messages.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampRpcInvocationCallback`1.Yield(WampSharp.V2.Core.Contracts.IWampCallee,System.Int64,WampSharp.V2.Core.Contracts.YieldOptions)">
            <summary>
            Occurs when a YIELD message arrives.
            </summary>
            <param name="callee">The <see cref="T:WampSharp.V2.Core.Contracts.IWampCallee"/> that sent this message.</param>
            <param name="requestId">The request id (given in 
                <see cref="!:IWampCallee&lt;TMessage&gt;.Invocation(long,long,TMessage)"/> message).</param>
            <param name="options">Additional options.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampRpcInvocationCallback`1.Yield(WampSharp.V2.Core.Contracts.IWampCallee,System.Int64,WampSharp.V2.Core.Contracts.YieldOptions,`0[])">
            <summary>
            Occurs when a YIELD message arrives.
            </summary>
            <param name="callee">The <see cref="T:WampSharp.V2.Core.Contracts.IWampCallee"/> that sent this message.</param>
            <param name="requestId">The request id (given in 
                <see cref="!:IWampCallee&lt;TMessage&gt;.Invocation(long,long,TMessage)"/> message).</param>
            <param name="options">Additional options.</param>
            <param name="arguments">The arguments of the current result.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampRpcInvocationCallback`1.Yield(WampSharp.V2.Core.Contracts.IWampCallee,System.Int64,WampSharp.V2.Core.Contracts.YieldOptions,`0[],System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Occurs when a YIELD message arrives.
            </summary>
            <param name="callee">The <see cref="T:WampSharp.V2.Core.Contracts.IWampCallee"/> that sent this message.</param>
            <param name="requestId">The request id (given in 
                <see cref="!:IWampCallee&lt;TMessage&gt;.Invocation(long,long,TMessage)"/> message).</param>
            <param name="options">Additional options.</param>
            <param name="arguments">The arguments of the current result.</param>
            <param name="argumentsKeywords">The argument keywords of the current result.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampErrorCallback`1">
            <summary>
            Handles generic server errors.
            </summary>
            <remarks>These messages are part of the WAMP2 specification.</remarks>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampErrorCallback`1.Error(WampSharp.V2.Core.Contracts.IWampClient,System.Int32,System.Int64,`0,System.String)">
            <summary>
            Occurs when a generic request error arrives.
            </summary>
            <param name="client">The client that sent this message.</param>
            <param name="requestType">The request's type.</param>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampErrorCallback`1.Error(WampSharp.V2.Core.Contracts.IWampClient,System.Int32,System.Int64,`0,System.String,`0[])">
            <summary>
            Occurs when a generic request error arrives.
            </summary>
            <param name="client">The client that sent this message.</param>
            <param name="requestType">The request's type.</param>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampErrorCallback`1.Error(WampSharp.V2.Core.Contracts.IWampClient,System.Int32,System.Int64,`0,System.String,`0[],`0)">
            <summary>
            Occurs when a generic request error arrives.
            </summary>
            <param name="client">The client that sent this message.</param>
            <param name="requestType">The request's type.</param>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
            <param name="argumentsKeywords">The error arguments keywords.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampBroker`1">
            <summary>
            Handles message of a WAMP2 broker.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <remarks>These messages are part of the WAMP2 specification.</remarks>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampBroker`1.Publish(WampSharp.V2.Core.Contracts.IWampPublisher,System.Int64,WampSharp.V2.Core.Contracts.PublishOptionsExtended,System.String)">
            <summary>
            Occurs when a PUBLISH message is arrived.
            </summary>
            <param name="publisher">The publisher that sent this message.</param>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The request options.</param>
            <param name="topicUri">The uri of the topic to publish this message to.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampBroker`1.Publish(WampSharp.V2.Core.Contracts.IWampPublisher,System.Int64,WampSharp.V2.Core.Contracts.PublishOptionsExtended,System.String,`0[])">
            <summary>
            Occurs when a PUBLISH message is arrived.
            </summary>
            <param name="publisher">The publisher that sent this message.</param>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The request options.</param>
            <param name="topicUri">The uri of the topic to publish this message to.</param>
            <param name="arguments">The arguments to publish.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampBroker`1.Publish(WampSharp.V2.Core.Contracts.IWampPublisher,System.Int64,WampSharp.V2.Core.Contracts.PublishOptionsExtended,System.String,`0[],System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Occurs when a PUBLISH message is arrived.
            </summary>
            <param name="publisher">The publisher that sent this message.</param>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The request options.</param>
            <param name="topicUri">The uri of the topic to publish this message to.</param>
            <param name="arguments">The arguments to publish.</param>
            <param name="argumentKeywords">Additional argument keywords to publish.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampBroker`1.Subscribe(WampSharp.V2.Core.Contracts.IWampSubscriber,System.Int64,WampSharp.V2.Core.Contracts.SubscribeOptions,System.String)">
            <summary>
            Occurs when a SUBSCRIBE message is arrived.
            </summary>
            <param name="subscriber">The subscriber that sent this message.</param>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The request options.</param>
            <param name="topicUri">The uri of the topic to subscribe to.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampBroker`1.Unsubscribe(WampSharp.V2.Core.Contracts.IWampSubscriber,System.Int64,System.Int64)">
            <summary>
            Occurs when a UNSUBSCRIBE message is arrived.
            </summary>
            <param name="subscriber">The subscriber that sent this message.</param>
            <param name="requestId">The request id of the message.</param>
            <param name="subscriptionId">The request subscription id to remove.</param>
        </member>
        <member name="T:WampSharp.V2.Binding.Contracts.JsonBinding`1">
            <summary>
            A base class that represents WAMP2 wamp.2.json binding.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Binding.WampTransportBinding`2">
            <summary>
            A base class for a WAMP transport binding.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TRaw"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Binding.WampBinding`1">
            <summary>
            Represents a base class for <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Binding.IWampBinding`1">
            <summary>
            Represents a WAMP binding.
            A WAMP binding is method for serializing messages from/to raw format.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Binding.IWampBinding">
            <summary>
            A non-generic base class <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Binding.IWampBinding.Name">
            <summary>
            The name of the current binding.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Binding.IWampBinding`1.GetRawMessage(WampSharp.Core.Message.WampMessage{`0})">
            <summary>
            Gets a raw message representing the given <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.
            </summary>
            <param name="message">The given <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.</param>
            <returns>The raw message.</returns>
            <remarks>A raw <see cref="T:WampSharp.Core.Message.WampMessage`1"/> is a
            <see cref="T:WampSharp.Core.Message.WampMessage`1"/> with additional properties
            which include a raw format of the message. This allows optimization
            of serializing the exact same message for multiple client.</remarks>
        </member>
        <member name="M:WampSharp.V2.Binding.IWampBinding`1.CreateHost(WampSharp.V2.Realm.IWampHostedRealmContainer,WampSharp.Core.Listener.IWampConnectionListener{`0})">
            <summary>
            Creates a <see cref="T:WampSharp.V2.Binding.IWampBindingHost"/> hosting this binding.
            </summary>
            <param name="realmContainer"></param>
            <param name="connectionListener"></param>
            <returns></returns>
            TODO: get rid of this?
        </member>
        <member name="P:WampSharp.V2.Binding.IWampBinding`1.Formatter">
            <summary>
            Get the <see cref="T:WampSharp.Core.Serialization.IWampFormatter`1"/> this binding serializes
            or deserializes messages with.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Binding.IWampTransportBinding`2">
            <summary>
            Represents a raw format <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TRaw"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Binding.Parsers.IWampMessageParser`2">
            <summary>
            Parses raw formatted messages from the stream into <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s
            and vice versa.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Binding.Parsers.IWampMessageParser`2.Parse(`1)">
            <summary>
            Parses a raw message to <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.
            </summary>
            <param name="raw">The given raw messsage.</param>
            <returns>The converted <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.</returns>
        </member>
        <member name="M:WampSharp.V2.Binding.Parsers.IWampMessageParser`2.Format(WampSharp.Core.Message.WampMessage{`0})">
            <summary>
            Formats a <see cref="T:WampSharp.Core.Message.WampMessage`1"/> to a raw format.
            </summary>
            <param name="message">The given <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.</param>
            <returns>A raw format representing the given <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.</returns>
        </member>
        <member name="T:WampSharp.V2.Binding.IWampTextBinding`1">
            <summary>
            Represents a text format <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Binding.Contracts.MsgPackBinding`1">
            <summary>
            A base class that represents WAMP2 wamp.2.msgpack binding.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Binding.IWampBinaryBinding`1">
            <summary>
            Represents a binary format <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Binding.Parsers.IWampBinaryMessageParser`1">
            <summary>
            Parses binary messages from the stream into <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s
            and vice versa.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Binding.Parsers.IWampTextMessageParser`1">
            <summary>
            Parses string messages from the stream into <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s
            and vice versa.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Binding.Transports.IWampTransport">
            <summary>
            Represents a WAMP transport - that is a mechanism that supplies a <see cref="T:WampSharp.Core.Listener.IWampConnectionListener`1"/>
            given a <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Binding.Transports.IWampTransport.Open">
            <summary>
            Opens this transport.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Binding.Transports.IWampTransport.GetListener``1(WampSharp.V2.Binding.IWampBinding{``0})">
            <summary>
            Gets a <see cref="T:WampSharp.Core.Listener.IWampConnectionListener`1"/> that is suitable
            for the given <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.
            </summary>
            <param name="binding">The given <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.</param>
            <typeparam name="TMessage"></typeparam>
            <returns>The requested <see cref="T:WampSharp.Core.Listener.IWampConnectionListener`1"/>.</returns>
        </member>
        <member name="T:WampSharp.V2.Binding.Transports.IWampTransport`1">
            <summary>
            Represents a <see cref="T:WampSharp.V2.Binding.Transports.IWampTransport"/> for a given underlying raw type.
            </summary>
            <typeparam name="TRaw"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Binding.Transports.IWampTransport`1.GetListener``1(WampSharp.V2.Binding.IWampTransportBinding{``0,`0})">
            <summary>
            Gets a <see cref="T:WampSharp.Core.Listener.IWampConnectionListener`1"/> that is suitable
            for the given <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.
            </summary>
            <param name="binding">The given <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.</param>
            <typeparam name="TMessage"></typeparam>
            <returns>The requested <see cref="T:WampSharp.Core.Listener.IWampConnectionListener`1"/>.</returns>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampError`1">
            <summary>
            Handles generic client errors, or sends server proxy errors.
            </summary>
            <remarks>These messages are part of the WAMP2 specification.</remarks>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampError`1.Error(System.Int32,System.Int64,`0,System.String)">
            <summary>
            Occurs when a generic request error arrives.
            </summary>
            <param name="requestType">The request's type.</param>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampError`1.Error(System.Int32,System.Int64,`0,System.String,`0[])">
            <summary>
            Occurs when a generic request error arrives.
            </summary>
            <param name="requestType">The request's type.</param>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampError`1.Error(System.Int32,System.Int64,`0,System.String,`0[],`0)">
            <summary>
            Occurs when a generic request error arrives.
            </summary>
            <param name="requestType">The request's type.</param>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
            <param name="argumentsKeywords">The error arguments keywords.</param>
        </member>
        <member name="T:WampSharp.V2.IWampChannel">
            <summary>
            Represents a WAMP client session.
            </summary>
        </member>
        <member name="M:WampSharp.V2.IWampChannel.Open">
            <summary>
            Tries to establish a connection to the WAMP router.
            </summary>
            <returns>A task that is complete when the connection is
            established.</returns>
        </member>
        <member name="M:WampSharp.V2.IWampChannel.Close">
            <summary>
            Closes the session violently.
            </summary>
        </member>
        <member name="M:WampSharp.V2.IWampChannel.Close(System.String,System.Object)">
            <summary>
            Closes the session.
            </summary>
            <param name="reason">The close reason.</param>
            <param name="details">The close details.</param>
        </member>
        <member name="P:WampSharp.V2.IWampChannel.RealmProxy">
            <summary>
            Gets a proxy of the realm, this session is connected to.
            </summary>
        </member>
        <member name="T:WampSharp.V2.IWampChannelFactory">
            <summary>
            Represents a factory for <see cref="T:WampSharp.V2.IWampChannel"/>s.
            </summary>
        </member>
        <member name="M:WampSharp.V2.IWampChannelFactory.CreateChannel``1(System.String,WampSharp.Core.Listener.IControlledWampConnection{``0},WampSharp.V2.Binding.IWampBinding{``0})">
            <summary>
            Creates a <see cref="T:WampSharp.V2.IWampChannel"/> that connects to a given realm,
            using the given connection and the given binding.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <param name="realm">The given realm to connect to.</param>
            <param name="connection">The connection to use to connect to the router.</param>
            <param name="binding">The binding to use to communicate with the router.</param>
            <returns></returns>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampProxy">
            <summary>
            An interface used for dynamic proxy generator.
            </summary>
        </member>
        <member name="T:WampSharp.V2.PubSub.IRemoteWampTopicSubscriber">
            <summary>
            Represents a proxy to a remote topic subscriber.
            </summary>
        </member>
        <member name="M:WampSharp.V2.PubSub.IRemoteWampTopicSubscriber.Event(WampSharp.V2.Core.Contracts.EventDetails)">
            <summary>
            Publishes an EVENT message with the given parameters.
            </summary>
            <param name="details">The details to publish.</param>
        </member>
        <member name="M:WampSharp.V2.PubSub.IRemoteWampTopicSubscriber.Event(WampSharp.V2.Core.Contracts.EventDetails,System.Object[])">
            <summary>
            Publishes an EVENT message with the given parameters.
            </summary>
            <param name="details">The details to publish.</param>
            <param name="arguments">The arguments to publish.</param>
        </member>
        <member name="M:WampSharp.V2.PubSub.IRemoteWampTopicSubscriber.Event(WampSharp.V2.Core.Contracts.EventDetails,System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Publishes an EVENT message with the given parameters.
            </summary>
            <param name="details">The details to publish.</param>
            <param name="arguments">The arguments to publish.</param>
            <param name="argumentsKeywords">The arguments keywords to publish.</param>
        </member>
        <member name="T:WampSharp.V2.Client.IWampTopicContainerProxy">
            <summary>
            Represents a proxy to a WAMP topic
            </summary>
        </member>
        <member name="M:WampSharp.V2.Client.IWampTopicContainerProxy.GetTopicByUri(System.String)">
            <summary>
            Gets a <see cref="T:WampSharp.V2.Client.IWampTopicProxy"/> given a WAMP topic uri.
            </summary>
            <param name="topicUri">The given topic uri.</param>
            <returns>The requested <see cref="T:WampSharp.V2.Client.IWampTopicProxy"/>.</returns>
        </member>
        <member name="T:WampSharp.V2.Client.IWampTopicProxy">
            <summary>
            Represents a proxy to a WAMP topic.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Client.IWampTopicProxy.Publish(WampSharp.V2.Core.Contracts.PublishOptions)">
            <summary>
            Publishes an event to the current topic.
            </summary>
            <param name="options">The options to publish with.</param>
            <returns>A task which is completed when the publish is done, with
            the publication id.</returns>
        </member>
        <member name="M:WampSharp.V2.Client.IWampTopicProxy.Publish(WampSharp.V2.Core.Contracts.PublishOptions,System.Object[])">
            <summary>
            Publishes an event to the current topic.
            </summary>
            <param name="options">The options to publish with.</param>
            <param name="arguments">The arguments of the published event.</param>
            <returns>A task which is completed when the publish is done, with
            the publication id.</returns>
        </member>
        <member name="M:WampSharp.V2.Client.IWampTopicProxy.Publish(WampSharp.V2.Core.Contracts.PublishOptions,System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Publishes an event to the current topic.
            </summary>
            <param name="options">The options to publish with.</param>
            <param name="arguments">The arguments of the published event.</param>
            <param name="argumentKeywords">The argument keywords of the published event.</param>
            <returns>A task which is completed when the publish is done, with
            the publication id.</returns>
        </member>
        <member name="M:WampSharp.V2.Client.IWampTopicProxy.Subscribe(WampSharp.V2.PubSub.IWampRawTopicClientSubscriber,WampSharp.V2.Core.Contracts.SubscribeOptions)">
            <summary>
            Subscribes to the the current topic.
            </summary>
            <param name="subscriber">The subscriber to receive the topic's events.</param>
            <param name="options">The options to subscribe with.</param>
            <returns>A task that completes when the subscription is done,
            with a disposable that its dispose will remove the subscription.</returns>
        </member>
        <member name="P:WampSharp.V2.Client.IWampTopicProxy.TopicUri">
            <summary>
            The topic uri
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampPublisherError`1">
            <summary>
            Handles errors of <see cref="T:WampSharp.V2.Core.Contracts.IWampPublisher"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampPublisherError`1.PublishError(System.Int64,`0,System.String)">
            <summary>
            Occurs when a PUBLISH request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampPublisherError`1.PublishError(System.Int64,`0,System.String,`0[])">
            <summary>
            Occurs when a PUBLISH request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampPublisherError`1.PublishError(System.Int64,`0,System.String,`0[],`0)">
            <summary>
            Occurs when a PUBLISH request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
            <param name="argumentsKeywords">The error arguments keywords.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampSubscriberError`1">
            <summary>
            Handles errors of <see cref="T:WampSharp.V2.Core.Contracts.IWampSubscriber"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSubscriberError`1.SubscribeError(System.Int64,`0,System.String)">
            <summary>
            Occurs when a SUBSCRIBE request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSubscriberError`1.SubscribeError(System.Int64,`0,System.String,`0[])">
            <summary>
            Occurs when a SUBSCRIBE request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSubscriberError`1.SubscribeError(System.Int64,`0,System.String,`0[],`0)">
            <summary>
            Occurs when a SUBSCRIBE request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
            <param name="argumentsKeywords">The error arguments keywords.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSubscriberError`1.UnsubscribeError(System.Int64,`0,System.String)">
            <summary>
            Occurs when an UNSUBSCRIBE request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSubscriberError`1.UnsubscribeError(System.Int64,`0,System.String,`0[])">
            <summary>
            Occurs when an UNSUBSCRIBE request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSubscriberError`1.UnsubscribeError(System.Int64,`0,System.String,`0[],`0)">
            <summary>
            Occurs when an UNSUBSCRIBE request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
            <param name="argumentsKeywords">The error arguments keywords.</param>
        </member>
        <member name="T:WampSharp.V2.Client.IWampRealmProxy">
            <summary>
            Represents a proxy to a WAMP realm.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Client.IWampRealmProxy.Name">
            <summary>
            Gets this realm's name.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Client.IWampRealmProxy.TopicContainer">
            <summary>
            Gets the <see cref="T:WampSharp.V2.Client.IWampTopicContainerProxy"/> associated with this
            realm proxy.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Client.IWampRealmProxy.RpcCatalog">
            <summary>
            Gets the <see cref="T:WampSharp.V2.Client.IWampRpcOperationCatalogProxy"/> associated with this
            realm proxy.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Client.IWampRealmProxy.Services">
            <summary>
            Gets the services for this realm proxy.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Client.IWampRealmProxy.Monitor">
            <summary>
            Gets a connection monitor assoicated with this realm proxy.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Client.IWampRealmProxy.Proxy">
            <summary>
            Gets a proxy to the server.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Client.WampRealmProxy`1">
            <summary>
            A default implementation of <see cref="T:WampSharp.V2.Client.IWampRealmProxy"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Realm.IWampHostedRealm">
            <summary>
            Represents a <see cref="T:WampSharp.V2.Realm.IWampRealm"/> which is hosted in a <see cref="T:WampSharp.V2.IWampHost"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Realm.IWampRealm">
            <summary>
            Represents a WAMP realm. That is a domain, where uris are mapped
            to topics and procedures.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Realm.IWampRealm.Name">
            <summary>
            Gets the realm's name.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Realm.IWampRealm.RpcCatalog">
            <summary>
            Gets the <see cref="T:WampSharp.V2.Rpc.IWampRpcOperationCatalog"/> associated with this realm.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Realm.IWampRealm.TopicContainer">
            <summary>
            Gets the <see cref="T:WampSharp.V2.PubSub.IWampTopicContainer"/> associated with this realm.
            </summary>
        </member>
        <member name="E:WampSharp.V2.Realm.IWampHostedRealm.SessionCreated">
            <summary>
            Occurs when a new session is created.
            </summary>
        </member>
        <member name="E:WampSharp.V2.Realm.IWampHostedRealm.SessionClosed">
            <summary>
            Occurs when a session is closed.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Realm.IWampHostedRealm.Services">
            <summary>
            Gets the services associated with this realm. 
            </summary>
        </member>
        <member name="T:WampSharp.V2.Realm.WampSessionCloseEventArgs">
            <summary>
            Represents <see cref="T:System.EventArgs"/> for a session close event.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Realm.WampSessionEventArgs">
            <summary>
            Respresents <see cref="T:System.EventArgs"/> for a WAMP session event.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Realm.WampSessionEventArgs.SessionId">
            <summary>
            Gets the relevant session id.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Realm.WampSessionEventArgs.Details">
            <summary>
            Gets the details associated with this event.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Realm.WampSessionCloseEventArgs.Reason">
            <summary>
            Gets the close reason.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Realm.WampSessionCloseEventArgs.CloseType">
            <summary>
            Gets the close type.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Rpc.IWampRpcOperation">
            <summary>
            Represents a WAMP rpc operation.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRpcOperation.Invoke``1(WampSharp.V2.Rpc.IWampRawRpcOperationRouterCallback,WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.InvocationDetails)">
            <summary>
            Invokes the procedure.
            </summary>
            <param name="caller">The callback to be notified when a result or error arrives.</param>
            <param name="formatter">The formatter that can be used to deserialize call arguments.</param>
            <param name="details">The details of this invocation.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRpcOperation.Invoke``1(WampSharp.V2.Rpc.IWampRawRpcOperationRouterCallback,WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.InvocationDetails,``0[])">
            <summary>
            Invokes the procedure.
            </summary>
            <param name="caller">The callback to be notified when a result or error arrives.</param>
            <param name="formatter">The formatter that can be used to deserialize call arguments.</param>
            <param name="details">The details of this invocation.</param>
            <param name="arguments">The arguments associated with this invocation.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRpcOperation.Invoke``1(WampSharp.V2.Rpc.IWampRawRpcOperationRouterCallback,WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.InvocationDetails,``0[],System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Invokes the procedure.
            </summary>
            <param name="caller">The callback to be notified when a result or error arrives.</param>
            <param name="formatter">The formatter that can be used to deserialize call arguments.</param>
            <param name="details">The details of this invocation.</param>
            <param name="arguments">The arguments associated with this invocation.</param>
            <param name="argumentsKeywords">The arguments keywords associated with this invocation.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="P:WampSharp.V2.Rpc.IWampRpcOperation.Procedure">
            <summary>
            Gets the procedure uri.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Rpc.LocalRpcOperation.CollectionResultTreatment">
            <summary>
            Returns a value indicating whether to treat an ICollection{T} result
            as the arguments yield argument. (If false, treats an ICollection{T} result
            value as a single argument).
            </summary>
        </member>
        <member name="T:WampSharp.V2.Rpc.IWampRawRpcOperationRouterCallback">
            <summary>
            Represents a callback for a WAMP rpc operation that lives in the router.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Client.IWampRpcOperationCatalogProxy">
            <summary>
            Represents a proxy to a <see cref="T:WampSharp.V2.Rpc.IWampRpcOperationCatalog"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Client.IWampRpcOperationRegistrationProxy">
            <summary>
            Represents a proxy to a <see cref="T:WampSharp.V2.Rpc.IWampRpcOperationCatalog"/>'s
            registration methods.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Client.IWampRpcOperationRegistrationProxy.Register(WampSharp.V2.Rpc.IWampRpcOperation,WampSharp.V2.Core.Contracts.RegisterOptions)">
            <summary>
            Registers an operation to the realm.
            </summary>
            <param name="operation">The operation to register.</param>
            <param name="options">The options to register with.</param>
            <returns>A task that completes when registration is complete.</returns>
        </member>
        <member name="M:WampSharp.V2.Client.IWampRpcOperationRegistrationProxy.Unregister(WampSharp.V2.Rpc.IWampRpcOperation)">
            <summary>
            Unregisters an operation from the realm.
            </summary>
            <param name="operation">The operation to register.</param>
            <returns>A task that completes when unregistration is complete.</returns>
        </member>
        <member name="T:WampSharp.V2.Client.IWampRpcOperationInvokerProxy">
            <summary>
            Represents a proxy to <see cref="T:WampSharp.V2.Rpc.IWampRpcOperationInvoker"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Client.IWampRpcOperationInvokerProxy`1">
            <summary>
            Represents a proxy to <see cref="T:WampSharp.V2.Rpc.IWampRpcOperationInvoker"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Client.IWampRpcOperationInvokerProxy`1.Invoke(WampSharp.V2.Rpc.IWampRawRpcOperationClientCallback,WampSharp.V2.Core.Contracts.CallOptions,System.String)">
            <summary>
            Invokes a operation remotely.
            </summary>
            <param name="caller">The caller that gets operation result callbacks.</param>
            <param name="options">The options to invoke the operation with.</param>
            <param name="procedure">The procedure to invoke.</param>
        </member>
        <member name="M:WampSharp.V2.Client.IWampRpcOperationInvokerProxy`1.Invoke(WampSharp.V2.Rpc.IWampRawRpcOperationClientCallback,WampSharp.V2.Core.Contracts.CallOptions,System.String,`0[])">
            <summary>
            Invokes a operation remotely.
            </summary>
            <param name="caller">The caller that gets operation result callbacks.</param>
            <param name="options">The options to invoke the operation with.</param>
            <param name="procedure">The procedure to invoke.</param>
            <param name="arguments">The arguments to invoke the operation with.</param>
        </member>
        <member name="M:WampSharp.V2.Client.IWampRpcOperationInvokerProxy`1.Invoke(WampSharp.V2.Rpc.IWampRawRpcOperationClientCallback,WampSharp.V2.Core.Contracts.CallOptions,System.String,`0[],System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Invokes a operation remotely.
            </summary>
            <param name="caller">The caller that gets operation result callbacks.</param>
            <param name="options">The options to invoke the operation with.</param>
            <param name="procedure">The procedure to invoke.</param>
            <param name="arguments">The arguments to invoke the operation with.</param>
            <param name="argumentsKeywords">The arguments keywords to invoke the operation with.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampCalleeError`1">
            <summary>
            Handles errors of <see cref="T:WampSharp.V2.Core.Contracts.IWampCallee"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampCalleeError`1.RegisterError(System.Int64,`0,System.String)">
            <summary>
            Occurs when a REGISTER request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampCalleeError`1.RegisterError(System.Int64,`0,System.String,`0[])">
            <summary>
            Occurs when a REGISTER request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampCalleeError`1.RegisterError(System.Int64,`0,System.String,`0[],`0)">
            <summary>
            Occurs when a REGISTER request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
            <param name="argumentsKeywords">The error arguments keywords.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampCalleeError`1.UnregisterError(System.Int64,`0,System.String)">
            <summary>
            Occurs when an UNREGISTER request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampCalleeError`1.UnregisterError(System.Int64,`0,System.String,`0[])">
            <summary>
            Occurs when an UNREGISTER request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampCalleeError`1.UnregisterError(System.Int64,`0,System.String,`0[],`0)">
            <summary>
            Occurs when an UNREGISTER request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
            <param name="argumentsKeywords">The error arguments keywords.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampCallerError`1">
            <summary>
            Handles errors of <see cref="T:WampSharp.V2.Core.Contracts.IWampCaller"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampCallerError`1.CallError(System.Int64,`0,System.String)">
            <summary>
            Occurs when a CALL request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampCallerError`1.CallError(System.Int64,`0,System.String,`0[])">
            <summary>
            Occurs when a CALL request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampCallerError`1.CallError(System.Int64,`0,System.String,`0[],`0)">
            <summary>
            Occurs when a CALL request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
            <param name="argumentsKeywords">The error arguments keywords.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.WampErrorHandlerAttribute">
            <summary>
            Indicates that the following method is a WAMP2 error handler of a given type..
            </summary>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.WampErrorHandlerAttribute.#ctor(WampSharp.Core.Message.WampMessageType)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V2.Core.Contracts.WampErrorHandlerAttribute"/>.
            </summary>
            <param name="messageType">The <see cref="T:WampSharp.Core.Message.WampMessageType"/>
            this error handler handles.</param>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.WampErrorHandlerAttribute.MessageType">
            <summary>
            The request type this error handler handles. 
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.WampErrors">
            <summary>
            Contains predefined WAMP ERROR uris
            </summary>
            <remarks>
            From https://github.com/tavendo/WAMP/blob/master/spec/basic.md
            </remarks>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.InvalidUri">
            <summary>
            *Peer* provided an incorrect URI for any URI-based attribute of WAMP message, such as realm, topic or procedure
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.CloseNormal">
            <summary>
            Indicates that the close was with a normal reason.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.NotAuthorized">
            <summary>
            *Peer* is not authorized to access the given resource. This might be triggered by a session trying to join a realm, a publish, subscribe, register or call.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.NoSuchRealm">
            <summary>
            *Peer* wanted to join a non-existing realm (and the *Router* did not allow to auto-create the realm).
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.SystemShutdown">
            <summary>
            The *Peer* is shutting down completely - used as a `GOODBYE` (or `ABORT`) reason.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.CloseRealm">
            <summary>
            The *Peer* want to leave the realm - used as a `GOODBYE` reason.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.GoodbyeAndOut">
            <summary>
            A *Peer* acknowledges ending of a session - used as a `GOOBYE` reply reason.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.NoSuchProcedure">
            <summary>
            A *Dealer* could not perform a call, since the procedure called does not exist.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.NoSuchSubscription">
            <summary>
            A *Broker* could not perform a unsubscribe, since the given subscription is not active.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.NoSuchRegistration">
            <summary>
            A *Dealer* could not perform a unregister, since the given registration is not active.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.InvalidArgument">
            <summary>
            A call failed, since the given argument types or values are not acceptable to the called procedure.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.InvalidTopic">
            <summary>
            A publish failed, since the given topic is not acceptable to the *Broker*.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.ProcedureAlreadyExists">
            <summary>
            A procedure could not be registered, since a procedure with the given URI is already registered (and the *Dealer* is not able to set up a distributed registration).
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampClient">
            <summary>
            Represents a WAMP2 client proxy.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampClientProperties">
            <summary>
            Contains additional properties of a <see cref="T:WampSharp.V2.Core.Contracts.IWampClient"/> proxy.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.IWampClientProperties.Session">
            <summary>
            Gets the session of the current client. 
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.IWampClientProperties.Binding">
            <summary>
            Gets the binding associated with the current client.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampClient`1">
            <summary>
            Represents a WAMP2 client/client proxy.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampRawClient`1">
            <summary>
            Represents a proxy to a client that can send raw messages.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampRawClient`1.Message(WampSharp.Core.Message.WampMessage{`0})">
            <summary>
            Sends a raw message to current client.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampClientProperties`1">
            <summary>
            Contains additional properties of a <see cref="T:WampSharp.V2.Core.Contracts.IWampClient`1"/> proxy.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.IWampClientProperties`1.GoodbyeSent">
            <summary>
            Gets or sets a value indicating whether the connection was closed in an orderly manner
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.IWampClientProperties`1.Session">
            <summary>
            Gets the session of the current client. 
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.IWampClientProperties`1.Realm">
            <summary>
            Gets the realm the current client belongs to.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.IWampClientProperties`1.Binding">
            <summary>
            Gets the binding associated with the current client.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampBrokerProxy`1">
            <summary>
            Represents a proxy to a WAMP2 broker.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <remarks>These messages are part of the WAMP2 specification.</remarks>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampBrokerProxy`1.Publish(System.Int64,WampSharp.V2.Core.Contracts.PublishOptions,System.String)">
            <summary>
            Sends a PUBLISH message.
            </summary>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The request options.</param>
            <param name="topicUri">The uri of the topic to publish this message to.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampBrokerProxy`1.Publish(System.Int64,WampSharp.V2.Core.Contracts.PublishOptions,System.String,`0[])">
            <summary>
            Sends a PUBLISH message.
            </summary>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The request options.</param>
            <param name="topicUri">The uri of the topic to publish this message to.</param>
            <param name="arguments">The arguments to publish.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampBrokerProxy`1.Publish(System.Int64,WampSharp.V2.Core.Contracts.PublishOptions,System.String,`0[],System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Sends a PUBLISH message.
            </summary>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The request options.</param>
            <param name="topicUri">The uri of the topic to publish this message to.</param>
            <param name="arguments">The arguments to publish.</param>
            <param name="argumentKeywords">Additional argument keywords to publish.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampBrokerProxy`1.Subscribe(System.Int64,WampSharp.V2.Core.Contracts.SubscribeOptions,System.String)">
            <summary>
            Sends a SUBSCRIBE message.
            </summary>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The request options.</param>
            <param name="topicUri">The uri of the topic to subscribe to.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampBrokerProxy`1.Unsubscribe(System.Int64,System.Int64)">
            <summary>
            Sends an UNSUBSCRIBE message.
            </summary>
            <param name="requestId">The request id of the message.</param>
            <param name="subscriptionId">The request subscription id to remove.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampDealerProxy`1">
            <summary>
            Represents a proxy to a WAMP2 dealer.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <remarks>These messages are part of the WAMP2 specification.</remarks>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealerProxy`1.Register(System.Int64,WampSharp.V2.Core.Contracts.RegisterOptions,System.String)">
            <summary>
            Sends a REGISTER message.
            </summary>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The request options.</param>
            <param name="procedure">The uri of the procedure to register.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealerProxy`1.Unregister(System.Int64,System.Int64)">
            <summary>
            Sends an UNREGISTER message.
            </summary>
            <param name="requestId">The request id of the message.</param>
            <param name="registrationId">The registration id of the registration to remove.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealerProxy`1.Call(System.Int64,WampSharp.V2.Core.Contracts.CallOptions,System.String)">
            <summary>
            Sends a CALL message.
            </summary>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The call request options.</param>
            <param name="procedure">The uri of the procedure to call.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealerProxy`1.Call(System.Int64,WampSharp.V2.Core.Contracts.CallOptions,System.String,`0[])">
            <summary>
            Sends a CALL message.
            </summary>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The call request options.</param>
            <param name="procedure">The uri of the procedure to call.</param>
            <param name="arguments">The arguments of the procedure to call.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealerProxy`1.Call(System.Int64,WampSharp.V2.Core.Contracts.CallOptions,System.String,`0[],System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Sends a CALL message.
            </summary>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The call request options.</param>
            <param name="procedure">The uri of the procedure to call.</param>
            <param name="arguments">The arguments of the procedure to call.</param>
            <param name="argumentsKeywords">The argument keywords of the procedure to call.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealerProxy`1.Cancel(System.Int64,`0)">
            <summary>
            Sends a CANCEL message.
            </summary>
            <param name="requestId">The request id of the call to cancel.</param>
            <param name="options">Additional options for cancelation.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealerProxy`1.Yield(System.Int64,WampSharp.V2.Core.Contracts.YieldOptions)">
            <summary>
            Sends a YIELD message.
            </summary>
            <param name="requestId">The request id (given in 
                <see cref="!:IWampCallee&lt;TMessage&gt;.Invocation(long,long,TMessage)"/> message).</param>
            <param name="options">Additional options.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealerProxy`1.Yield(System.Int64,WampSharp.V2.Core.Contracts.YieldOptions,`0[])">
            <summary>
            Sends a YIELD message.
            </summary>
            <param name="requestId">The request id (given in 
                <see cref="!:IWampCallee&lt;TMessage&gt;.Invocation(long,long,TMessage)"/> message).</param>
            <param name="options">Additional options.</param>
            <param name="arguments">The arguments of the current result.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealerProxy`1.Yield(System.Int64,WampSharp.V2.Core.Contracts.YieldOptions,`0[],System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Sends a YIELD message.
            </summary>
            <param name="requestId">The request id (given in 
                <see cref="!:IWampCallee&lt;TMessage&gt;.Invocation(long,long,TMessage)"/> message).</param>
            <param name="options">Additional options.</param>
            <param name="arguments">The arguments of the current result.</param>
            <param name="argumentsKeywords">The argument keywords of the current result.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampServerProxy">
            <summary>
            Represents a proxy to a WAMP2 router.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampServerProxy`1">
            <summary>
            Represents a proxy to a WAMP2 router.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampSessionProxy`1">
            <summary>
            Represents a proxy to a WAMP2 router session handler.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <remarks>These messages are part of the WAMP2 specification.</remarks>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSessionProxy`1.Hello(System.String,`0)">
            <summary>
            Sends a HELLO message.
            </summary>
            <param name="realm">The requested realm to join.</param>
            <param name="details">Details about the client.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSessionProxy`1.Abort(`0,System.String)">
            <summary>
            Sends a ABORT message.
            </summary>
            <param name="details">Additional details.</param>
            <param name="reason">A uri representing the abort reason.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSessionProxy`1.Authenticate(System.String,`0)">
            <summary>
            Sends an AUTHENTICATE message.
            </summary>
            <param name="signature">A signature.</param>
            <param name="extra">Extra data.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSessionProxy`1.Goodbye(`0,System.String)">
            <summary>
            Sends a GOODBYE message.
            </summary>
            <param name="details">Additional details.</param>
            <param name="reason">A uri representing the leave reason.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSessionProxy`1.Heartbeat(System.Int32,System.Int32)">
            <summary>
            Sends a HEARTBEAT message.
            </summary>
            <param name="incomingSeq">The incoming count sequence.</param>
            <param name="outgoingSeq">The outgoing count sequence.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSessionProxy`1.Heartbeat(System.Int32,System.Int32,System.String)">
            <summary>
            Sends a HEARTBEAT message.
            </summary>
            <param name="incomingSeq">The incoming count sequence.</param>
            <param name="outgoingSeq">The outgoing count sequence.</param>
            <param name="discard">???</param>
        </member>
        <member name="T:WampSharp.V2.Core.IWampIdGenerator">
            <summary>
            Generates request and session ids.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Core.IWampIdGenerator.Generate">
            <summary>
            Generates a id.
            </summary>
            <returns>The generated id.</returns>
        </member>
        <member name="T:WampSharp.V2.Core.Listener.ClientBuilder.WampClientBuilder`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Listener.IWampClientBuilder`2"/>
            that is specific to WAMPv2.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Listener.ClientBuilder.WampClientBuilder`1.#ctor(WampSharp.V2.Core.IWampIdGenerator,WampSharp.Core.Proxy.IWampOutgoingRequestSerializer{`0},WampSharp.Core.Listener.IWampOutgoingMessageHandlerBuilder{`0},WampSharp.Core.Listener.IWampClientContainer{`0,WampSharp.V2.Core.Contracts.IWampClient{`0}},WampSharp.V2.Binding.IWampBinding{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V2.Core.Listener.ClientBuilder.WampClientBuilder`1"/>.
            </summary>
            <param name="sessionIdGenerator">A given <see cref="T:WampSharp.V2.Core.IWampIdGenerator"/> used in order
            to generate session ids for clients.</param>
            <param name="outgoingSerializer">A <see cref="T:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer`1"/>
            used to serialize message calls into <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s</param>
            <param name="outgoingHandlerBuilder">An <see cref="T:WampSharp.Core.Listener.IWampOutgoingMessageHandlerBuilder`1"/> used to build
            a <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler`1"/> per connection.</param>
            <param name="container">A <see cref="T:WampSharp.Core.Listener.IWampClientContainer`2"/> that contains all clients.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Listener.ClientBuilder.WampClientBuilderFactory`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Listener.IWampClientBuilderFactory`2"/>
            using <see cref="T:WampSharp.V2.Core.Listener.ClientBuilder.WampClientBuilder`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Listener.ClientBuilder.WampClientBuilderFactory`1.#ctor(WampSharp.V2.Core.IWampIdGenerator,WampSharp.Core.Proxy.IWampOutgoingRequestSerializer{`0},WampSharp.Core.Listener.IWampOutgoingMessageHandlerBuilder{`0},WampSharp.V2.Binding.IWampBinding{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V2.Core.Listener.ClientBuilder.WampClientBuilderFactory`1"/>.
            </summary>
            <param name="sessionIdGenerator">The <see cref="T:WampSharp.V2.Core.IWampIdGenerator"/> used to generate
            session ids.</param>
            <param name="outgoingSerializer">The <see cref="T:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer`1"/>
            used to serialize methods call to <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s.</param>
            <param name="outgoingHandlerBuilder">The <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler`1"/>
            used to create the <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler`1"/> used to
            handle outgoing <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Listener.WampListener`1">
            <summary>
            A <see cref="T:WampSharp.V2.Core.Listener.WampListener`1"/> that is
            WAMPv2 specific.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Listener.WampListener`1.#ctor(WampSharp.Core.Listener.IWampConnectionListener{`0},WampSharp.Core.Dispatch.IWampIncomingMessageHandler{`0,WampSharp.V2.Core.Contracts.IWampClient{`0}},WampSharp.Core.Listener.IWampClientContainer{`0,WampSharp.V2.Core.Contracts.IWampClient{`0}},WampSharp.V2.Core.Contracts.IWampSessionServer{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V2.Core.Listener.WampListener`1"/>
            </summary>
            <param name="listener">The <see cref="T:WampSharp.Core.Listener.IWampConnectionListener`1"/> used in order to 
            accept incoming connections.</param>
            <param name="handler">The <see cref="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`1"/> used
            in order to dispatch incoming messages.</param>
            <param name="clientContainer">The <see cref="T:WampSharp.Core.Listener.IWampClientContainer`2"/> use
            in order to store the connected clients.</param>
            <param name="sessionHandler">A session handler that handles new clients.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Proxy.WampInterceptorSelector`1">
            <summary>
            An <see cref="T:Castle.DynamicProxy.IInterceptorSelector"/> that chooses between
            <see cref="T:WampSharp.Core.Proxy.WampOutgoingInterceptor`1"/> and 
            <see cref="T:WampSharp.Core.Proxy.WampRawOutgoingInterceptor`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Proxy.WampInterceptorSelector`1.#ctor(WampSharp.Core.Proxy.WampOutgoingInterceptor{`0},WampSharp.Core.Proxy.WampRawOutgoingInterceptor{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V2.Core.Proxy.WampInterceptorSelector`1"/>.
            </summary>
            <param name="interceptor">The given <see cref="T:WampSharp.Core.Proxy.WampOutgoingInterceptor`1"/> used
            for WAMP method calls</param>
        </member>
        <member name="T:WampSharp.V2.Core.WampIdGenerator">
            <summary>
            A default implementation of <see cref="T:WampSharp.V2.Core.IWampIdGenerator"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V2.PubSub.WampSubscriptionAddEventArgs">
            <summary>
            Occurs when a subscription was added.
            </summary>
        </member>
        <member name="P:WampSharp.V2.PubSub.WampSubscriptionAddEventArgs.Subscriber">
            <summary>
            Gets a proxy to the subscribing subscriber.
            </summary>
        </member>
        <member name="P:WampSharp.V2.PubSub.WampSubscriptionAddEventArgs.Options">
            <summary>
            Gets the options the subscriber subscribed with.
            </summary>
        </member>
        <member name="T:WampSharp.V2.PubSub.WampTopicCreatedEventArgs">
            <summary>
            Represents <see cref="T:System.EventArgs"/> for an event where a topic was created.
            </summary>
        </member>
        <member name="P:WampSharp.V2.PubSub.WampTopicEventArgs.Topic">
            <summary>
            Gets the relevant topic.
            </summary>
        </member>
        <member name="T:WampSharp.V2.PubSub.WampTopicRemovedEventArgs">
            <summary>
            Represents <see cref="T:System.EventArgs"/> for an event where a topic was removed.
            </summary>
        </member>
        <member name="T:WampSharp.V2.PubSub.ISubscriptionNotifier">
            <summary>
            Declares events for <see cref="T:WampSharp.V2.PubSub.IWampTopic"/> subscriptions.
            </summary>
        </member>
        <member name="E:WampSharp.V2.PubSub.ISubscriptionNotifier.SubscriptionAdding">
            <summary>
            Occurs before a subscription was added.
            </summary>
        </member>
        <member name="E:WampSharp.V2.PubSub.ISubscriptionNotifier.SubscriptionAdded">
            <summary>
            Occurs after a subscription was added.
            </summary>
        </member>
        <member name="E:WampSharp.V2.PubSub.ISubscriptionNotifier.SubscriptionRemoving">
            <summary>
            Occurs before a subscription was removed.
            </summary>
        </member>
        <member name="E:WampSharp.V2.PubSub.ISubscriptionNotifier.SubscriptionRemoved">
            <summary>
            Occurs before a subscription was removed.
            </summary>
        </member>
        <member name="E:WampSharp.V2.PubSub.ISubscriptionNotifier.TopicEmpty">
            <summary>
            Occurs when the topic is empty.
            </summary>
        </member>
        <member name="T:WampSharp.V2.PubSub.IWampTopic">
            <summary>
            Represents a WAMP topic.
            </summary>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopic.Publish``1(WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.PublishOptions)">
            <summary>
            Publishes a message to the topic
            </summary>
            <param name="formatter">The formatter been used to publish the message.</param>
            <param name="publishOptions">The options of the publication.</param>
            <typeparam name="TMessage"></typeparam>
            <returns>The publication id.</returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopic.Publish``1(WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.PublishOptions,``0[])">
            <summary>
            Publishes a message to the topic
            </summary>
            <param name="formatter">The formatter been used to publish the message.</param>
            <param name="publishOptions">The options of the publication.</param>
            <param name="arguments">The arguments to publish.</param>
            <typeparam name="TMessage"></typeparam>
            <returns>The publication id.</returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopic.Publish``1(WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.PublishOptions,``0[],System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Publishes a message to the topic
            </summary>
            <param name="formatter">The formatter been used to publish the message.</param>
            <param name="publishOptions">The options of the publication.</param>
            <param name="arguments">The arguments to publish.</param>
            <param name="argumentKeywords">The arguments keywords to publish.</param>
            <typeparam name="TMessage"></typeparam>
            <returns>The publication id.</returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopic.Subscribe(WampSharp.V2.PubSub.IWampRawTopicRouterSubscriber)">
            <summary>
            Subscribes a given subscriber to the topic.
            </summary>
            <param name="subscriber">The given subscriber.</param>
            <returns>A disposable, when disposed the subscription will be canceled.</returns>
        </member>
        <member name="P:WampSharp.V2.PubSub.IWampTopic.HasSubscribers">
            <summary>
            Gets a value indicating whether this topic has subscribers.
            </summary>
        </member>
        <member name="P:WampSharp.V2.PubSub.IWampTopic.TopicUri">
            <summary>
            Gets the topic uri of this topic.
            </summary>
        </member>
        <member name="T:WampSharp.V2.PubSub.IWampTopicContainer">
            <summary>
            Represents a container for <see cref="T:WampSharp.V2.PubSub.IWampTopic"/>s of a given realm.
            </summary>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopicContainer.Subscribe(WampSharp.V2.PubSub.IWampRawTopicRouterSubscriber,System.String,WampSharp.V2.Core.Contracts.SubscribeOptions)">
            <summary>
            Subscribes to a topic given its uri.
            </summary>
            <param name="subscriber">The subscriber to subscribe with.</param>
            <param name="topicUri">The topic uri of the topic to subscribe to.</param>
            <param name="options">The options to subscribe with.</param>
            <returns>A disposable, that will cancel subscription to the topic when disposed.</returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopicContainer.Publish``1(WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.PublishOptions,System.String)">
            <summary>
            Publishes to a requestd topic with requested parameters. 
            </summary>
            <param name="formatter">The formatter that this publication can be deserialized with.</param>
            <param name="options">The publication options.</param>
            <param name="topicUri">The topic uri of the topic to publish to.</param>
            <typeparam name="TMessage"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopicContainer.Publish``1(WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.PublishOptions,System.String,``0[])">
            <summary>
            Publishes to a requestd topic with requested parameters. 
            </summary>
            <param name="formatter">The formatter that this publication can be deserialized with.</param>
            <param name="options">The publication options.</param>
            <param name="topicUri">The topic uri of the topic to publish to.</param>
            <param name="arguments">The published arguments.</param>
            <typeparam name="TMessage"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopicContainer.Publish``1(WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.PublishOptions,System.String,``0[],System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Publishes to a requestd topic with requested parameters. 
            </summary>
            <param name="formatter">The formatter that this publication can be deserialized with.</param>
            <param name="options">The publication options.</param>
            <param name="topicUri">The topic uri of the topic to publish to.</param>
            <param name="arguments">The published arguments.</param>
            <param name="argumentKeywords">The published argument keywords.</param>
            <typeparam name="TMessage"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopicContainer.CreateTopicByUri(System.String,System.Boolean)">
            <summary>
            Creates and adds a topic to the container given its uri.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <param name="persistent">A value indicating whether the topic is persistent.</param>
            <returns>The created topic.</returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopicContainer.GetOrCreateTopicByUri(System.String)">
            <summary>
            Gets or creates a topic given its uri.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <returns>The requested topic.</returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopicContainer.GetTopicByUri(System.String)">
            <summary>
            Gets a topic given it uri.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <returns>The requested topic.</returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopicContainer.TryRemoveTopicByUri(System.String,WampSharp.V2.PubSub.IWampTopic@)">
            <summary>
            Tries to remove a topic given its uri.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <param name="topic">The removed topic.</param>
            <returns>A value indicating whether the removal succeeded.</returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopicContainer.GetSubscriptionId(System.String,WampSharp.V2.Core.Contracts.SubscribeOptions)">
            <summary>
            Creates an id for a topic uri based on options.
            </summary>
            <param name="topicUri">The topic uri of the subscription.</param>
            <param name="options">The subscription options.</param>
            <returns>The generated id.</returns>
            <remarks>If you don't know what to do here, use a simple 
            <see cref="T:WampSharp.V2.PubSub.OptionlessSubscriptionId"/>.</remarks>
        </member>
        <member name="P:WampSharp.V2.PubSub.IWampTopicContainer.TopicUris">
            <summary>
            Gets the uris of the topics present in the container.
            </summary>
        </member>
        <member name="P:WampSharp.V2.PubSub.IWampTopicContainer.Topics">
            <summary>
            Gets the topics currently present in the container.
            </summary>
        </member>
        <member name="E:WampSharp.V2.PubSub.IWampTopicContainer.TopicCreated">
            <summary>
            Occurs when a new topic is created.
            </summary>
        </member>
        <member name="E:WampSharp.V2.PubSub.IWampTopicContainer.TopicRemoved">
            <summary>
            Occurs when a topic is removed.
            </summary>
        </member>
        <member name="T:WampSharp.V2.PubSub.WampTopicContainer">
            <summary>
            A default implementation of <see cref="T:WampSharp.V2.PubSub.IWampTopicContainer"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.PubSub.WampTopicContainer.#ctor">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V2.PubSub.WampTopicContainer"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Rpc.CollectionResultTreatment">
            <summary>
            Indicates how to treat results of type <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Rpc.CollectionResultTreatment.SingleValue">
            <summary>
            Indicates that result of type <see cref="T:System.Collections.Generic.ICollection`1"/> are treated as
            a single return value.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Rpc.CollectionResultTreatment.Multivalued">
            <summary>
            Indicates that result of type <see cref="T:System.Collections.Generic.ICollection`1"/> are treated as
            a multiple return value - i.e. as the arguments of the result.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Rpc.IWampRpcOperationCatalog">
            <summary>
            Represents a container for rpc procedures registered in a realm.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Rpc.IWampRpcOperationInvoker">
            <summary>
            Represents a mechanism that can invoke rpc operations.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRpcOperationInvoker.Invoke``1(WampSharp.V2.Rpc.IWampRawRpcOperationRouterCallback,WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.InvocationDetails,System.String)">
            <summary>
            Invokes the request procedure with the given parameters.
            </summary>
            <param name="caller">The callback that will be called when a result or error is available.</param>
            <param name="formatter">A formatter that can be used to deserialize given arguments.</param>
            <param name="details">The details associated with this call.</param>
            <param name="procedure">The procedure to invoke.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRpcOperationInvoker.Invoke``1(WampSharp.V2.Rpc.IWampRawRpcOperationRouterCallback,WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.InvocationDetails,System.String,``0[])">
            <summary>
            Invokes the request procedure with the given parameters.
            </summary>
            <param name="caller">The callback that will be called when a result or error is available.</param>
            <param name="formatter">A formatter that can be used to deserialize given arguments.</param>
            <param name="details">The details associated with this call.</param>
            <param name="procedure">The procedure to invoke.</param>
            <param name="arguments">The arguments associated with this call.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRpcOperationInvoker.Invoke``1(WampSharp.V2.Rpc.IWampRawRpcOperationRouterCallback,WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.InvocationDetails,System.String,``0[],System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Invokes the request procedure with the given parameters.
            </summary>
            <param name="caller">The callback that will be called when a result or error is available.</param>
            <param name="formatter">A formatter that can be used to deserialize given arguments.</param>
            <param name="details">The details associated with this call.</param>
            <param name="procedure">The procedure to invoke.</param>
            <param name="arguments">The arguments associated with this call.</param>
            <param name="argumentsKeywords">The arguments keywords associated with this call.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRpcOperationInvoker.Invoke``1(WampSharp.V2.Rpc.IWampRawRpcOperationClientCallback,WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.InvocationDetails,System.String)">
            <summary>
            Invokes the request procedure with the given parameters.
            </summary>
            <param name="caller">The callback that will be called when a result or error is available.</param>
            <param name="formatter">A formatter that can be used to deserialize given arguments.</param>
            <param name="details">The details associated with this call.</param>
            <param name="procedure">The procedure to invoke.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRpcOperationInvoker.Invoke``1(WampSharp.V2.Rpc.IWampRawRpcOperationClientCallback,WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.InvocationDetails,System.String,``0[])">
            <summary>
            Invokes the request procedure with the given parameters.
            </summary>
            <param name="caller">The callback that will be called when a result or error is available.</param>
            <param name="formatter">A formatter that can be used to deserialize given arguments.</param>
            <param name="details">The details associated with this call.</param>
            <param name="procedure">The procedure to invoke.</param>
            <param name="arguments">The arguments associated with this call.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRpcOperationInvoker.Invoke``1(WampSharp.V2.Rpc.IWampRawRpcOperationClientCallback,WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.InvocationDetails,System.String,``0[],System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Invokes the request procedure with the given parameters.
            </summary>
            <param name="caller">The callback that will be called when a result or error is available.</param>
            <param name="formatter">A formatter that can be used to deserialize given arguments.</param>
            <param name="details">The details associated with this call.</param>
            <param name="procedure">The procedure to invoke.</param>
            <param name="arguments">The arguments associated with this call.</param>
            <param name="argumentsKeywords">The arguments keywords associated with this call.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRpcOperationCatalog.Register(WampSharp.V2.Rpc.IWampRpcOperation)">
            <summary>
            Registers a <see cref="T:WampSharp.V2.Rpc.IWampRpcOperation"/> to the realm.
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRpcOperationCatalog.Unregister(WampSharp.V2.Rpc.IWampRpcOperation)">
            <summary>
            Unregisters a given <see cref="T:WampSharp.V2.Rpc.IWampRpcOperation"/> from the catalog.
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:WampSharp.V2.Rpc.WampResultAttribute.#ctor(WampSharp.V2.Rpc.CollectionResultTreatment)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V2.Rpc.WampResultAttribute"/>.
            </summary>
            <param name="collectionResultTreatment">A value indicating how to treat results of type
            <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
    </members>
</doc>
